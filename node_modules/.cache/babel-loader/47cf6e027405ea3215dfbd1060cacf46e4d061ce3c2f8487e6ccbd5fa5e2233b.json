{"ast":null,"code":"import BookAPIAdapter from './BookAPIAdapter';\nclass OpenLibraryAdapter extends BookAPIAdapter {\n  constructor() {\n    super('OpenLibrary');\n    this.baseURL = 'https://openlibrary.org';\n    this.coversURL = 'https://covers.openlibrary.org/b';\n  }\n  async search(query, options = {}) {\n    try {\n      const {\n        limit = 20,\n        offset = 0,\n        sort = 'relevance',\n        // relevance, rating, new, old\n        lang = 'es'\n      } = options;\n      let url = `${this.baseURL}/search.json?q=${encodeURIComponent(query)}`;\n      url += `&limit=${limit}`;\n      url += `&offset=${offset}`;\n      url += `&sort=${sort}`;\n      url += `&lang=${lang}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Open Library API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        success: true,\n        books: (data.docs || []).map(item => this.normalizeBook(item)),\n        totalItems: data.numFound || 0,\n        hasMore: offset + limit < (data.numFound || 0)\n      };\n    } catch (error) {\n      console.error('Open Library API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: [],\n        totalItems: 0,\n        hasMore: false\n      };\n    }\n  }\n  async getBookDetails(bookId) {\n    try {\n      // bookId should be in format like '/works/OL45804W' or 'OL45804W'\n      const workId = bookId.startsWith('/works/') ? bookId : `/works/${bookId}`;\n      const url = `${this.baseURL}${workId}.json`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Open Library API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        success: true,\n        book: this.normalizeBook(data, true)\n      };\n    } catch (error) {\n      console.error('Open Library API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        book: null\n      };\n    }\n  }\n  normalizeBook(rawBook, isDetailView = false) {\n    var _rawBook$edition_key, _rawBook$publish_date, _rawBook$publish_year, _rawBook$publisher, _rawBook$publishers, _rawBook$subject, _rawBook$language, _rawBook$isbn, _rawBook$isbn_, _rawBook$isbn_2;\n    // Handle different response formats\n    const id = rawBook.key || rawBook.work_id || ((_rawBook$edition_key = rawBook.edition_key) === null || _rawBook$edition_key === void 0 ? void 0 : _rawBook$edition_key[0]) || '';\n    const title = rawBook.title || '';\n    const authors = this.extractAuthors(rawBook);\n    const description = this.extractDescription(rawBook);\n\n    // Extract publish date\n    const publishedDate = rawBook.first_publish_year || ((_rawBook$publish_date = rawBook.publish_date) === null || _rawBook$publish_date === void 0 ? void 0 : _rawBook$publish_date[0]) || ((_rawBook$publish_year = rawBook.publish_year) === null || _rawBook$publish_year === void 0 ? void 0 : _rawBook$publish_year[0]) || '';\n\n    // Extract publisher\n    const publisher = ((_rawBook$publisher = rawBook.publisher) === null || _rawBook$publisher === void 0 ? void 0 : _rawBook$publisher[0]) || ((_rawBook$publishers = rawBook.publishers) === null || _rawBook$publishers === void 0 ? void 0 : _rawBook$publishers[0]) || '';\n\n    // Extract page count\n    const pageCount = rawBook.number_of_pages_median || 0;\n\n    // Extract categories/subjects\n    const categories = ((_rawBook$subject = rawBook.subject) === null || _rawBook$subject === void 0 ? void 0 : _rawBook$subject.slice(0, 5)) || [];\n\n    // Extract rating info\n    const averageRating = rawBook.ratings_average || 0;\n    const ratingsCount = rawBook.ratings_count || 0;\n\n    // Generate image links\n    const imageLinks = this.generateImageLinks(rawBook);\n\n    // Extract language\n    const language = ((_rawBook$language = rawBook.language) === null || _rawBook$language === void 0 ? void 0 : _rawBook$language[0]) || 'es';\n\n    // Extract ISBN\n    const isbn = ((_rawBook$isbn = rawBook.isbn) === null || _rawBook$isbn === void 0 ? void 0 : _rawBook$isbn[0]) || ((_rawBook$isbn_ = rawBook.isbn_13) === null || _rawBook$isbn_ === void 0 ? void 0 : _rawBook$isbn_[0]) || ((_rawBook$isbn_2 = rawBook.isbn_10) === null || _rawBook$isbn_2 === void 0 ? void 0 : _rawBook$isbn_2[0]) || '';\n    return this.createStandardBook({\n      id: id.replace('/works/', ''),\n      title,\n      authors,\n      description,\n      publishedDate: String(publishedDate),\n      publisher,\n      pageCount,\n      categories,\n      averageRating,\n      ratingsCount,\n      imageLinks,\n      language,\n      isbn,\n      source: 'open-library'\n    });\n  }\n  extractAuthors(rawBook) {\n    if (rawBook.author_name) {\n      return rawBook.author_name;\n    }\n    if (rawBook.authors) {\n      return rawBook.authors.map(author => author.name || author).filter(Boolean);\n    }\n    return [];\n  }\n  extractDescription(rawBook) {\n    var _rawBook$description, _rawBook$first_senten;\n    if (typeof rawBook.description === 'string') {\n      return rawBook.description;\n    }\n    if ((_rawBook$description = rawBook.description) !== null && _rawBook$description !== void 0 && _rawBook$description.value) {\n      return rawBook.description.value;\n    }\n    return ((_rawBook$first_senten = rawBook.first_sentence) === null || _rawBook$first_senten === void 0 ? void 0 : _rawBook$first_senten.join(' ')) || '';\n  }\n  generateImageLinks(rawBook) {\n    var _rawBook$isbn2, _rawBook$isbn_3, _rawBook$isbn_4, _rawBook$edition_key2;\n    const coverId = rawBook.cover_i || rawBook.cover_id;\n    const isbn = ((_rawBook$isbn2 = rawBook.isbn) === null || _rawBook$isbn2 === void 0 ? void 0 : _rawBook$isbn2[0]) || ((_rawBook$isbn_3 = rawBook.isbn_13) === null || _rawBook$isbn_3 === void 0 ? void 0 : _rawBook$isbn_3[0]) || ((_rawBook$isbn_4 = rawBook.isbn_10) === null || _rawBook$isbn_4 === void 0 ? void 0 : _rawBook$isbn_4[0]);\n    const olid = (_rawBook$edition_key2 = rawBook.edition_key) === null || _rawBook$edition_key2 === void 0 ? void 0 : _rawBook$edition_key2[0];\n    if (coverId) {\n      return {\n        thumbnail: `${this.coversURL}/id/${coverId}-S.jpg`,\n        small: `${this.coversURL}/id/${coverId}-M.jpg`,\n        medium: `${this.coversURL}/id/${coverId}-L.jpg`,\n        large: `${this.coversURL}/id/${coverId}-L.jpg`\n      };\n    }\n    if (isbn) {\n      return {\n        thumbnail: `${this.coversURL}/isbn/${isbn}-S.jpg`,\n        small: `${this.coversURL}/isbn/${isbn}-M.jpg`,\n        medium: `${this.coversURL}/isbn/${isbn}-L.jpg`,\n        large: `${this.coversURL}/isbn/${isbn}-L.jpg`\n      };\n    }\n    if (olid) {\n      return {\n        thumbnail: `${this.coversURL}/olid/${olid}-S.jpg`,\n        small: `${this.coversURL}/olid/${olid}-M.jpg`,\n        medium: `${this.coversURL}/olid/${olid}-L.jpg`,\n        large: `${this.coversURL}/olid/${olid}-L.jpg`\n      };\n    }\n    return {};\n  }\n\n  // Search by specific fields\n  async searchByAuthor(author, options = {}) {\n    return this.search(`author:\"${author}\"`, options);\n  }\n  async searchByTitle(title, options = {}) {\n    return this.search(`title:\"${title}\"`, options);\n  }\n  async searchByISBN(isbn, options = {}) {\n    return this.search(`isbn:${isbn}`, options);\n  }\n  async searchBySubject(subject, options = {}) {\n    return this.search(`subject:\"${subject}\"`, options);\n  }\n}\nexport default OpenLibraryAdapter;","map":{"version":3,"names":["BookAPIAdapter","OpenLibraryAdapter","constructor","baseURL","coversURL","search","query","options","limit","offset","sort","lang","url","encodeURIComponent","response","fetch","ok","Error","status","data","json","success","books","docs","map","item","normalizeBook","totalItems","numFound","hasMore","error","console","message","getBookDetails","bookId","workId","startsWith","book","rawBook","isDetailView","_rawBook$edition_key","_rawBook$publish_date","_rawBook$publish_year","_rawBook$publisher","_rawBook$publishers","_rawBook$subject","_rawBook$language","_rawBook$isbn","_rawBook$isbn_","_rawBook$isbn_2","id","key","work_id","edition_key","title","authors","extractAuthors","description","extractDescription","publishedDate","first_publish_year","publish_date","publish_year","publisher","publishers","pageCount","number_of_pages_median","categories","subject","slice","averageRating","ratings_average","ratingsCount","ratings_count","imageLinks","generateImageLinks","language","isbn","isbn_13","isbn_10","createStandardBook","replace","String","source","author_name","author","name","filter","Boolean","_rawBook$description","_rawBook$first_senten","value","first_sentence","join","_rawBook$isbn2","_rawBook$isbn_3","_rawBook$isbn_4","_rawBook$edition_key2","coverId","cover_i","cover_id","olid","thumbnail","small","medium","large","searchByAuthor","searchByTitle","searchByISBN","searchBySubject"],"sources":["/Applications/Projects/bibliofinder-front/src/services/api/OpenLibraryAdapter.js"],"sourcesContent":["import BookAPIAdapter from './BookAPIAdapter';\n\nclass OpenLibraryAdapter extends BookAPIAdapter {\n  constructor() {\n    super('OpenLibrary');\n    this.baseURL = 'https://openlibrary.org';\n    this.coversURL = 'https://covers.openlibrary.org/b';\n  }\n\n  async search(query, options = {}) {\n    try {\n      const {\n        limit = 20,\n        offset = 0,\n        sort = 'relevance', // relevance, rating, new, old\n        lang = 'es'\n      } = options;\n\n      let url = `${this.baseURL}/search.json?q=${encodeURIComponent(query)}`;\n      url += `&limit=${limit}`;\n      url += `&offset=${offset}`;\n      url += `&sort=${sort}`;\n      url += `&lang=${lang}`;\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Open Library API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        books: (data.docs || []).map(item => this.normalizeBook(item)),\n        totalItems: data.numFound || 0,\n        hasMore: (offset + limit) < (data.numFound || 0)\n      };\n    } catch (error) {\n      console.error('Open Library API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: [],\n        totalItems: 0,\n        hasMore: false\n      };\n    }\n  }\n\n  async getBookDetails(bookId) {\n    try {\n      // bookId should be in format like '/works/OL45804W' or 'OL45804W'\n      const workId = bookId.startsWith('/works/') ? bookId : `/works/${bookId}`;\n      const url = `${this.baseURL}${workId}.json`;\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Open Library API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        book: this.normalizeBook(data, true)\n      };\n    } catch (error) {\n      console.error('Open Library API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        book: null\n      };\n    }\n  }\n\n  normalizeBook(rawBook, isDetailView = false) {\n    // Handle different response formats\n    const id = rawBook.key || rawBook.work_id || rawBook.edition_key?.[0] || '';\n    const title = rawBook.title || '';\n    const authors = this.extractAuthors(rawBook);\n    const description = this.extractDescription(rawBook);\n    \n    // Extract publish date\n    const publishedDate = rawBook.first_publish_year || \n                         rawBook.publish_date?.[0] || \n                         rawBook.publish_year?.[0] || '';\n\n    // Extract publisher\n    const publisher = rawBook.publisher?.[0] || rawBook.publishers?.[0] || '';\n    \n    // Extract page count\n    const pageCount = rawBook.number_of_pages_median || 0;\n    \n    // Extract categories/subjects\n    const categories = rawBook.subject?.slice(0, 5) || [];\n    \n    // Extract rating info\n    const averageRating = rawBook.ratings_average || 0;\n    const ratingsCount = rawBook.ratings_count || 0;\n    \n    // Generate image links\n    const imageLinks = this.generateImageLinks(rawBook);\n    \n    // Extract language\n    const language = rawBook.language?.[0] || 'es';\n    \n    // Extract ISBN\n    const isbn = rawBook.isbn?.[0] || rawBook.isbn_13?.[0] || rawBook.isbn_10?.[0] || '';\n\n    return this.createStandardBook({\n      id: id.replace('/works/', ''),\n      title,\n      authors,\n      description,\n      publishedDate: String(publishedDate),\n      publisher,\n      pageCount,\n      categories,\n      averageRating,\n      ratingsCount,\n      imageLinks,\n      language,\n      isbn,\n      source: 'open-library'\n    });\n  }\n\n  extractAuthors(rawBook) {\n    if (rawBook.author_name) {\n      return rawBook.author_name;\n    }\n    if (rawBook.authors) {\n      return rawBook.authors.map(author => author.name || author).filter(Boolean);\n    }\n    return [];\n  }\n\n  extractDescription(rawBook) {\n    if (typeof rawBook.description === 'string') {\n      return rawBook.description;\n    }\n    if (rawBook.description?.value) {\n      return rawBook.description.value;\n    }\n    return rawBook.first_sentence?.join(' ') || '';\n  }\n\n  generateImageLinks(rawBook) {\n    const coverId = rawBook.cover_i || rawBook.cover_id;\n    const isbn = rawBook.isbn?.[0] || rawBook.isbn_13?.[0] || rawBook.isbn_10?.[0];\n    const olid = rawBook.edition_key?.[0];\n\n    if (coverId) {\n      return {\n        thumbnail: `${this.coversURL}/id/${coverId}-S.jpg`,\n        small: `${this.coversURL}/id/${coverId}-M.jpg`,\n        medium: `${this.coversURL}/id/${coverId}-L.jpg`,\n        large: `${this.coversURL}/id/${coverId}-L.jpg`\n      };\n    }\n    \n    if (isbn) {\n      return {\n        thumbnail: `${this.coversURL}/isbn/${isbn}-S.jpg`,\n        small: `${this.coversURL}/isbn/${isbn}-M.jpg`,\n        medium: `${this.coversURL}/isbn/${isbn}-L.jpg`,\n        large: `${this.coversURL}/isbn/${isbn}-L.jpg`\n      };\n    }\n    \n    if (olid) {\n      return {\n        thumbnail: `${this.coversURL}/olid/${olid}-S.jpg`,\n        small: `${this.coversURL}/olid/${olid}-M.jpg`,\n        medium: `${this.coversURL}/olid/${olid}-L.jpg`,\n        large: `${this.coversURL}/olid/${olid}-L.jpg`\n      };\n    }\n\n    return {};\n  }\n\n  // Search by specific fields\n  async searchByAuthor(author, options = {}) {\n    return this.search(`author:\"${author}\"`, options);\n  }\n\n  async searchByTitle(title, options = {}) {\n    return this.search(`title:\"${title}\"`, options);\n  }\n\n  async searchByISBN(isbn, options = {}) {\n    return this.search(`isbn:${isbn}`, options);\n  }\n\n  async searchBySubject(subject, options = {}) {\n    return this.search(`subject:\"${subject}\"`, options);\n  }\n}\n\nexport default OpenLibraryAdapter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}