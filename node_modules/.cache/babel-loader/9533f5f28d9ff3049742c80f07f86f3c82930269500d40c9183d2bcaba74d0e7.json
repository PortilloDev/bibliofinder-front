{"ast":null,"code":"// Excel processing utility for importing books\nclass ExcelProcessor {\n  constructor() {\n    this.supportedExtensions = ['xlsx', 'xls', 'csv'];\n    this.maxFileSize = 10 * 1024 * 1024; // 10MB\n  }\n\n  // Validate file before processing\n  validateFile(file) {\n    const errors = [];\n    if (!file) {\n      errors.push('No se ha seleccionado ningún archivo');\n      return {\n        valid: false,\n        errors\n      };\n    }\n\n    // Check file size\n    if (file.size > this.maxFileSize) {\n      errors.push(`El archivo es demasiado grande. Máximo permitido: ${this.formatFileSize(this.maxFileSize)}`);\n    }\n\n    // Check file extension\n    const extension = this.getFileExtension(file.name);\n    if (!this.supportedExtensions.includes(extension)) {\n      errors.push(`Formato de archivo no soportado. Formatos permitidos: ${this.supportedExtensions.join(', ')}`);\n    }\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Get file extension\n  getFileExtension(filename) {\n    return filename.toLowerCase().split('.').pop();\n  }\n\n  // Format file size for display\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Process Excel/CSV file\n  async processFile(file) {\n    const validation = this.validateFile(file);\n    if (!validation.valid) {\n      return {\n        success: false,\n        errors: validation.errors,\n        data: []\n      };\n    }\n    try {\n      const extension = this.getFileExtension(file.name);\n      let data;\n      if (extension === 'csv') {\n        data = await this.processCSV(file);\n      } else {\n        data = await this.processExcel(file);\n      }\n      return {\n        success: true,\n        data: data.books,\n        headers: data.headers,\n        rowCount: data.books.length,\n        errors: data.errors || []\n      };\n    } catch (error) {\n      console.error('Error processing file:', error);\n      return {\n        success: false,\n        errors: [error.message],\n        data: []\n      };\n    }\n  }\n\n  // Process CSV file\n  async processCSV(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const csv = e.target.result;\n          const lines = csv.split('\\n').filter(line => line.trim());\n          if (lines.length === 0) {\n            throw new Error('El archivo CSV está vacío');\n          }\n\n          // Parse headers\n          const headers = this.parseCSVLine(lines[0]);\n          const normalizedHeaders = this.normalizeHeaders(headers);\n\n          // Parse data rows\n          const books = [];\n          const errors = [];\n          for (let i = 1; i < lines.length; i++) {\n            try {\n              const values = this.parseCSVLine(lines[i]);\n              if (values.length > 0 && values.some(val => val.trim())) {\n                const book = this.mapRowToBook(normalizedHeaders, values, i + 1);\n                books.push(book);\n              }\n            } catch (error) {\n              errors.push(`Fila ${i + 1}: ${error.message}`);\n            }\n          }\n          resolve({\n            books,\n            headers: normalizedHeaders,\n            errors\n          });\n        } catch (error) {\n          reject(error);\n        }\n      };\n      reader.onerror = () => reject(new Error('Error leyendo el archivo CSV'));\n      reader.readAsText(file, 'UTF-8');\n    });\n  }\n\n  // Process Excel file (requires external library in real implementation)\n  async processExcel(file) {\n    // For now, we'll return a mock implementation\n    // In a real app, you'd use a library like 'xlsx' or 'exceljs'\n    throw new Error('Procesamiento de Excel no implementado aún. Por favor, use formato CSV.');\n  }\n\n  // Parse CSV line handling quoted values\n  parseCSVLine(line) {\n    const values = [];\n    let current = '';\n    let inQuotes = false;\n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      if (char === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          current += '\"';\n          i++; // Skip next quote\n        } else {\n          inQuotes = !inQuotes;\n        }\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    values.push(current.trim());\n    return values;\n  }\n\n  // Normalize headers to standard field names\n  normalizeHeaders(headers) {\n    const headerMap = {\n      // Spanish headers\n      'título': 'title',\n      'titulo': 'title',\n      'nombre': 'title',\n      'libro': 'title',\n      'autor': 'authors',\n      'autores': 'authors',\n      'escritor': 'authors',\n      'descripción': 'description',\n      'descripcion': 'description',\n      'resumen': 'description',\n      'sinopsis': 'description',\n      'categoría': 'category',\n      'categoria': 'category',\n      'género': 'category',\n      'genero': 'category',\n      'tipo': 'category',\n      'editorial': 'publisher',\n      'editor': 'publisher',\n      'publicado': 'publishedDate',\n      'fecha': 'publishedDate',\n      'año': 'publishedDate',\n      'páginas': 'pageCount',\n      'paginas': 'pageCount',\n      'hojas': 'pageCount',\n      'isbn': 'isbn',\n      'idioma': 'language',\n      'lenguaje': 'language',\n      'valoración': 'rating',\n      'valoracion': 'rating',\n      'puntuación': 'rating',\n      'puntuacion': 'rating',\n      'calificación': 'rating',\n      'calificacion': 'rating',\n      'nota': 'rating',\n      'notas': 'notes',\n      'comentarios': 'notes',\n      'observaciones': 'notes',\n      'reseña': 'review',\n      'resena': 'review',\n      'opinión': 'review',\n      'opinion': 'review',\n      'progreso': 'progress',\n      'avance': 'progress',\n      'porcentaje': 'progress',\n      'etiquetas': 'tags',\n      'tags': 'tags',\n      'marcadores': 'tags',\n      // English headers\n      'title': 'title',\n      'name': 'title',\n      'book': 'title',\n      'author': 'authors',\n      'authors': 'authors',\n      'writer': 'authors',\n      'description': 'description',\n      'summary': 'description',\n      'synopsis': 'description',\n      'category': 'category',\n      'genre': 'category',\n      'type': 'category',\n      'publisher': 'publisher',\n      'published': 'publishedDate',\n      'date': 'publishedDate',\n      'year': 'publishedDate',\n      'pages': 'pageCount',\n      'language': 'language',\n      'rating': 'rating',\n      'score': 'rating',\n      'notes': 'notes',\n      'comments': 'notes',\n      'review': 'review',\n      'opinion': 'review',\n      'progress': 'progress',\n      'percentage': 'progress',\n      'tags': 'tags',\n      'labels': 'tags'\n    };\n    return headers.map(header => {\n      const normalized = header.toLowerCase().trim();\n      return headerMap[normalized] || header;\n    });\n  }\n\n  // Map row values to book object\n  mapRowToBook(headers, values, rowNumber) {\n    const book = {};\n    for (let i = 0; i < headers.length && i < values.length; i++) {\n      var _values$i;\n      const header = headers[i];\n      const value = (_values$i = values[i]) === null || _values$i === void 0 ? void 0 : _values$i.toString().trim();\n      if (value) {\n        switch (header) {\n          case 'title':\n            book.title = value;\n            break;\n          case 'authors':\n            book.authors = value;\n            break;\n          case 'description':\n            book.description = value;\n            break;\n          case 'category':\n            book.category = value;\n            break;\n          case 'publisher':\n            book.publisher = value;\n            break;\n          case 'publishedDate':\n            book.publishedDate = value;\n            break;\n          case 'pageCount':\n            const pages = parseInt(value);\n            if (!isNaN(pages)) {\n              book.pageCount = pages;\n            }\n            break;\n          case 'language':\n            book.language = value;\n            break;\n          case 'isbn':\n            book.isbn = value;\n            break;\n          case 'rating':\n            const rating = parseFloat(value);\n            if (!isNaN(rating) && rating >= 0 && rating <= 5) {\n              book.personalRating = rating;\n            }\n            break;\n          case 'notes':\n            book.notes = value;\n            break;\n          case 'review':\n            book.review = value;\n            break;\n          case 'progress':\n            const progress = parseInt(value);\n            if (!isNaN(progress) && progress >= 0 && progress <= 100) {\n              book.progress = progress;\n            }\n            break;\n          case 'tags':\n            book.tags = value;\n            break;\n          default:\n            // Store custom fields\n            book[header] = value;\n        }\n      }\n    }\n\n    // Validate required fields\n    if (!book.title) {\n      throw new Error('El título es obligatorio');\n    }\n    return book;\n  }\n\n  // Generate template CSV for users\n  generateTemplateCSV() {\n    const headers = ['Título', 'Autor', 'Descripción', 'Categoría', 'Editorial', 'Año Publicación', 'Páginas', 'ISBN', 'Idioma', 'Valoración Personal', 'Notas', 'Reseña', 'Progreso (%)', 'Etiquetas'];\n    const sampleData = [['El Quijote', 'Miguel de Cervantes', 'Las aventuras de Don Quijote de la Mancha', 'Clásicos', 'Real Academia Española', '1605', '1000', '978-84-376-0494-7', 'es', '5', 'Una obra maestra de la literatura', 'Excelente novela que marca el inicio de la literatura moderna', '100', 'clásicos, español, aventura']];\n    let csv = headers.join(',') + '\\n';\n    sampleData.forEach(row => {\n      csv += row.map(cell => `\"${cell}\"`).join(',') + '\\n';\n    });\n    return csv;\n  }\n\n  // Download template CSV\n  downloadTemplate() {\n    const csv = this.generateTemplateCSV();\n    const blob = new Blob([csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'plantilla_libros.csv';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n}\n\n// Create singleton instance\nconst excelProcessor = new ExcelProcessor();\nexport default excelProcessor;","map":{"version":3,"names":["ExcelProcessor","constructor","supportedExtensions","maxFileSize","validateFile","file","errors","push","valid","size","formatFileSize","extension","getFileExtension","name","includes","join","length","filename","toLowerCase","split","pop","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","processFile","validation","success","data","processCSV","processExcel","books","headers","rowCount","error","console","message","Promise","resolve","reject","reader","FileReader","onload","e","csv","target","result","lines","filter","line","trim","Error","parseCSVLine","normalizedHeaders","normalizeHeaders","values","some","val","book","mapRowToBook","onerror","readAsText","current","inQuotes","char","headerMap","map","header","normalized","rowNumber","_values$i","value","toString","title","authors","description","category","publisher","publishedDate","pages","parseInt","isNaN","pageCount","language","isbn","rating","personalRating","notes","review","progress","tags","generateTemplateCSV","sampleData","forEach","row","cell","downloadTemplate","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","excelProcessor"],"sources":["/Applications/Projects/bibliofinder-front/src/utils/excelProcessor.js"],"sourcesContent":["// Excel processing utility for importing books\nclass ExcelProcessor {\n  constructor() {\n    this.supportedExtensions = ['xlsx', 'xls', 'csv'];\n    this.maxFileSize = 10 * 1024 * 1024; // 10MB\n  }\n\n  // Validate file before processing\n  validateFile(file) {\n    const errors = [];\n\n    if (!file) {\n      errors.push('No se ha seleccionado ningún archivo');\n      return { valid: false, errors };\n    }\n\n    // Check file size\n    if (file.size > this.maxFileSize) {\n      errors.push(`El archivo es demasiado grande. Máximo permitido: ${this.formatFileSize(this.maxFileSize)}`);\n    }\n\n    // Check file extension\n    const extension = this.getFileExtension(file.name);\n    if (!this.supportedExtensions.includes(extension)) {\n      errors.push(`Formato de archivo no soportado. Formatos permitidos: ${this.supportedExtensions.join(', ')}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Get file extension\n  getFileExtension(filename) {\n    return filename.toLowerCase().split('.').pop();\n  }\n\n  // Format file size for display\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  // Process Excel/CSV file\n  async processFile(file) {\n    const validation = this.validateFile(file);\n    if (!validation.valid) {\n      return {\n        success: false,\n        errors: validation.errors,\n        data: []\n      };\n    }\n\n    try {\n      const extension = this.getFileExtension(file.name);\n      let data;\n\n      if (extension === 'csv') {\n        data = await this.processCSV(file);\n      } else {\n        data = await this.processExcel(file);\n      }\n\n      return {\n        success: true,\n        data: data.books,\n        headers: data.headers,\n        rowCount: data.books.length,\n        errors: data.errors || []\n      };\n    } catch (error) {\n      console.error('Error processing file:', error);\n      return {\n        success: false,\n        errors: [error.message],\n        data: []\n      };\n    }\n  }\n\n  // Process CSV file\n  async processCSV(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (e) => {\n        try {\n          const csv = e.target.result;\n          const lines = csv.split('\\n').filter(line => line.trim());\n          \n          if (lines.length === 0) {\n            throw new Error('El archivo CSV está vacío');\n          }\n\n          // Parse headers\n          const headers = this.parseCSVLine(lines[0]);\n          const normalizedHeaders = this.normalizeHeaders(headers);\n          \n          // Parse data rows\n          const books = [];\n          const errors = [];\n\n          for (let i = 1; i < lines.length; i++) {\n            try {\n              const values = this.parseCSVLine(lines[i]);\n              if (values.length > 0 && values.some(val => val.trim())) {\n                const book = this.mapRowToBook(normalizedHeaders, values, i + 1);\n                books.push(book);\n              }\n            } catch (error) {\n              errors.push(`Fila ${i + 1}: ${error.message}`);\n            }\n          }\n\n          resolve({ books, headers: normalizedHeaders, errors });\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      reader.onerror = () => reject(new Error('Error leyendo el archivo CSV'));\n      reader.readAsText(file, 'UTF-8');\n    });\n  }\n\n  // Process Excel file (requires external library in real implementation)\n  async processExcel(file) {\n    // For now, we'll return a mock implementation\n    // In a real app, you'd use a library like 'xlsx' or 'exceljs'\n    throw new Error('Procesamiento de Excel no implementado aún. Por favor, use formato CSV.');\n  }\n\n  // Parse CSV line handling quoted values\n  parseCSVLine(line) {\n    const values = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          current += '\"';\n          i++; // Skip next quote\n        } else {\n          inQuotes = !inQuotes;\n        }\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    \n    values.push(current.trim());\n    return values;\n  }\n\n  // Normalize headers to standard field names\n  normalizeHeaders(headers) {\n    const headerMap = {\n      // Spanish headers\n      'título': 'title',\n      'titulo': 'title',\n      'nombre': 'title',\n      'libro': 'title',\n      'autor': 'authors',\n      'autores': 'authors',\n      'escritor': 'authors',\n      'descripción': 'description',\n      'descripcion': 'description',\n      'resumen': 'description',\n      'sinopsis': 'description',\n      'categoría': 'category',\n      'categoria': 'category',\n      'género': 'category',\n      'genero': 'category',\n      'tipo': 'category',\n      'editorial': 'publisher',\n      'editor': 'publisher',\n      'publicado': 'publishedDate',\n      'fecha': 'publishedDate',\n      'año': 'publishedDate',\n      'páginas': 'pageCount',\n      'paginas': 'pageCount',\n      'hojas': 'pageCount',\n      'isbn': 'isbn',\n      'idioma': 'language',\n      'lenguaje': 'language',\n      'valoración': 'rating',\n      'valoracion': 'rating',\n      'puntuación': 'rating',\n      'puntuacion': 'rating',\n      'calificación': 'rating',\n      'calificacion': 'rating',\n      'nota': 'rating',\n      'notas': 'notes',\n      'comentarios': 'notes',\n      'observaciones': 'notes',\n      'reseña': 'review',\n      'resena': 'review',\n      'opinión': 'review',\n      'opinion': 'review',\n      'progreso': 'progress',\n      'avance': 'progress',\n      'porcentaje': 'progress',\n      'etiquetas': 'tags',\n      'tags': 'tags',\n      'marcadores': 'tags',\n      \n      // English headers\n      'title': 'title',\n      'name': 'title',\n      'book': 'title',\n      'author': 'authors',\n      'authors': 'authors',\n      'writer': 'authors',\n      'description': 'description',\n      'summary': 'description',\n      'synopsis': 'description',\n      'category': 'category',\n      'genre': 'category',\n      'type': 'category',\n      'publisher': 'publisher',\n      'published': 'publishedDate',\n      'date': 'publishedDate',\n      'year': 'publishedDate',\n      'pages': 'pageCount',\n      'language': 'language',\n      'rating': 'rating',\n      'score': 'rating',\n      'notes': 'notes',\n      'comments': 'notes',\n      'review': 'review',\n      'opinion': 'review',\n      'progress': 'progress',\n      'percentage': 'progress',\n      'tags': 'tags',\n      'labels': 'tags'\n    };\n\n    return headers.map(header => {\n      const normalized = header.toLowerCase().trim();\n      return headerMap[normalized] || header;\n    });\n  }\n\n  // Map row values to book object\n  mapRowToBook(headers, values, rowNumber) {\n    const book = {};\n    \n    for (let i = 0; i < headers.length && i < values.length; i++) {\n      const header = headers[i];\n      const value = values[i]?.toString().trim();\n      \n      if (value) {\n        switch (header) {\n          case 'title':\n            book.title = value;\n            break;\n          case 'authors':\n            book.authors = value;\n            break;\n          case 'description':\n            book.description = value;\n            break;\n          case 'category':\n            book.category = value;\n            break;\n          case 'publisher':\n            book.publisher = value;\n            break;\n          case 'publishedDate':\n            book.publishedDate = value;\n            break;\n          case 'pageCount':\n            const pages = parseInt(value);\n            if (!isNaN(pages)) {\n              book.pageCount = pages;\n            }\n            break;\n          case 'language':\n            book.language = value;\n            break;\n          case 'isbn':\n            book.isbn = value;\n            break;\n          case 'rating':\n            const rating = parseFloat(value);\n            if (!isNaN(rating) && rating >= 0 && rating <= 5) {\n              book.personalRating = rating;\n            }\n            break;\n          case 'notes':\n            book.notes = value;\n            break;\n          case 'review':\n            book.review = value;\n            break;\n          case 'progress':\n            const progress = parseInt(value);\n            if (!isNaN(progress) && progress >= 0 && progress <= 100) {\n              book.progress = progress;\n            }\n            break;\n          case 'tags':\n            book.tags = value;\n            break;\n          default:\n            // Store custom fields\n            book[header] = value;\n        }\n      }\n    }\n\n    // Validate required fields\n    if (!book.title) {\n      throw new Error('El título es obligatorio');\n    }\n\n    return book;\n  }\n\n  // Generate template CSV for users\n  generateTemplateCSV() {\n    const headers = [\n      'Título',\n      'Autor',\n      'Descripción',\n      'Categoría',\n      'Editorial',\n      'Año Publicación',\n      'Páginas',\n      'ISBN',\n      'Idioma',\n      'Valoración Personal',\n      'Notas',\n      'Reseña',\n      'Progreso (%)',\n      'Etiquetas'\n    ];\n\n    const sampleData = [\n      [\n        'El Quijote',\n        'Miguel de Cervantes',\n        'Las aventuras de Don Quijote de la Mancha',\n        'Clásicos',\n        'Real Academia Española',\n        '1605',\n        '1000',\n        '978-84-376-0494-7',\n        'es',\n        '5',\n        'Una obra maestra de la literatura',\n        'Excelente novela que marca el inicio de la literatura moderna',\n        '100',\n        'clásicos, español, aventura'\n      ]\n    ];\n\n    let csv = headers.join(',') + '\\n';\n    sampleData.forEach(row => {\n      csv += row.map(cell => `\"${cell}\"`).join(',') + '\\n';\n    });\n\n    return csv;\n  }\n\n  // Download template CSV\n  downloadTemplate() {\n    const csv = this.generateTemplateCSV();\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'plantilla_libros.csv';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    URL.revokeObjectURL(url);\n  }\n}\n\n// Create singleton instance\nconst excelProcessor = new ExcelProcessor();\n\nexport default excelProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}