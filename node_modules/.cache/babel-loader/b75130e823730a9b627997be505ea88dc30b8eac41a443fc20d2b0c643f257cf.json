{"ast":null,"code":"var _jsxFileName = \"/Applications/Projects/bibliofinder-front/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport authService from '../services/AuthService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Initialize auth state\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n  const initializeAuth = async () => {\n    setLoading(true);\n    try {\n      // Check if user is authenticated by validating token\n      const result = await authService.getCurrentUser();\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      } else {\n        // Clear invalid auth data\n        authService.clearAuthData();\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      authService.clearAuthData();\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const result = await authService.login(email, password);\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (name, email, password, passwordConfirmation) => {\n    try {\n      setLoading(true);\n      const result = await authService.register(name, email, password, passwordConfirmation);\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loginWithGoogle = async (googleToken = null) => {\n    try {\n      setLoading(true);\n      let result;\n      if (googleToken) {\n        result = await authService.loginWithGoogle(googleToken);\n      } else {\n        // Handle Google OAuth flow\n        result = await authService.getGoogleAuthUrl();\n        if (result.success) {\n          // Store auth mode and redirect\n          sessionStorage.setItem('google_auth_mode', 'login');\n          window.location.href = result.url;\n          return {\n            success: true,\n            redirected: true\n          };\n        }\n      }\n      if (result.success && result.user) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    return {\n      success: true\n    };\n  };\n  const updateProfile = async updates => {\n    try {\n      const result = await authService.updateProfile(updates);\n      if (result.success) {\n        setUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const changePassword = async (currentPassword, newPassword, newPasswordConfirmation) => {\n    try {\n      return await authService.changePassword(currentPassword, newPassword, newPasswordConfirmation);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const linkGoogleAccount = async googleToken => {\n    try {\n      const result = await authService.linkGoogleAccount(googleToken);\n      if (result.success) {\n        setUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const unlinkGoogleAccount = async () => {\n    try {\n      const result = await authService.unlinkGoogleAccount();\n      if (result.success) {\n        setUser(result.user);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      return await authService.requestPasswordReset(email);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const resetPassword = async (token, email, password, passwordConfirmation) => {\n    try {\n      return await authService.resetPassword(token, email, password, passwordConfirmation);\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Handle Google OAuth callback\n  const handleGoogleCallback = async (code, state) => {\n    try {\n      setLoading(true);\n      const result = await authService.handleGoogleCallback(code, state);\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    loginWithGoogle,\n    logout,\n    updateProfile,\n    changePassword,\n    linkGoogleAccount,\n    unlinkGoogleAccount,\n    requestPasswordReset,\n    resetPassword,\n    handleGoogleCallback,\n    refreshAuth: initializeAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","initializeAuth","result","getCurrentUser","success","clearAuthData","error","console","login","email","password","message","register","name","passwordConfirmation","loginWithGoogle","googleToken","getGoogleAuthUrl","sessionStorage","setItem","window","location","href","url","redirected","logout","updateProfile","updates","changePassword","currentPassword","newPassword","newPasswordConfirmation","linkGoogleAccount","unlinkGoogleAccount","requestPasswordReset","resetPassword","token","handleGoogleCallback","code","state","value","refreshAuth","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/Projects/bibliofinder-front/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport authService from '../services/AuthService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Initialize auth state\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    setLoading(true);\n    try {\n      // Check if user is authenticated by validating token\n      const result = await authService.getCurrentUser();\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      } else {\n        // Clear invalid auth data\n        authService.clearAuthData();\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      authService.clearAuthData();\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const result = await authService.login(email, password);\n      \n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (name, email, password, passwordConfirmation) => {\n    try {\n      setLoading(true);\n      const result = await authService.register(name, email, password, passwordConfirmation);\n      \n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loginWithGoogle = async (googleToken = null) => {\n    try {\n      setLoading(true);\n      \n      let result;\n      if (googleToken) {\n        result = await authService.loginWithGoogle(googleToken);\n      } else {\n        // Handle Google OAuth flow\n        result = await authService.getGoogleAuthUrl();\n        if (result.success) {\n          // Store auth mode and redirect\n          sessionStorage.setItem('google_auth_mode', 'login');\n          window.location.href = result.url;\n          return { success: true, redirected: true };\n        }\n      }\n      \n      if (result.success && result.user) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    return { success: true };\n  };\n\n  const updateProfile = async (updates) => {\n    try {\n      const result = await authService.updateProfile(updates);\n      \n      if (result.success) {\n        setUser(result.user);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const changePassword = async (currentPassword, newPassword, newPasswordConfirmation) => {\n    try {\n      return await authService.changePassword(currentPassword, newPassword, newPasswordConfirmation);\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const linkGoogleAccount = async (googleToken) => {\n    try {\n      const result = await authService.linkGoogleAccount(googleToken);\n      \n      if (result.success) {\n        setUser(result.user);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const unlinkGoogleAccount = async () => {\n    try {\n      const result = await authService.unlinkGoogleAccount();\n      \n      if (result.success) {\n        setUser(result.user);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const requestPasswordReset = async (email) => {\n    try {\n      return await authService.requestPasswordReset(email);\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const resetPassword = async (token, email, password, passwordConfirmation) => {\n    try {\n      return await authService.resetPassword(token, email, password, passwordConfirmation);\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Handle Google OAuth callback\n  const handleGoogleCallback = async (code, state) => {\n    try {\n      setLoading(true);\n      const result = await authService.handleGoogleCallback(code, state);\n      \n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n      }\n      \n      return result;\n    } catch (error) {\n      return { success: false, error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    loginWithGoogle,\n    logout,\n    updateProfile,\n    changePassword,\n    linkGoogleAccount,\n    unlinkGoogleAccount,\n    requestPasswordReset,\n    resetPassword,\n    handleGoogleCallback,\n    refreshAuth: initializeAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACAC,SAAS,CAAC,MAAM;IACdkB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACA,MAAMI,MAAM,GAAG,MAAMlB,WAAW,CAACmB,cAAc,CAAC,CAAC;MACjD,IAAID,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM;QACL;QACAhB,WAAW,CAACqB,aAAa,CAAC,CAAC;QAC3BT,OAAO,CAAC,IAAI,CAAC;QACbI,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDtB,WAAW,CAACqB,aAAa,CAAC,CAAC;MAC3BT,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACFZ,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,MAAM,GAAG,MAAMlB,WAAW,CAACwB,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAEvD,IAAIR,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;MAC1B;MAEA,OAAOE,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMc,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,oBAAoB,KAAK;IACtE,IAAI;MACFhB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,MAAM,GAAG,MAAMlB,WAAW,CAAC4B,QAAQ,CAACC,IAAI,EAAEJ,KAAK,EAAEC,QAAQ,EAAEI,oBAAoB,CAAC;MAEtF,IAAIZ,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;MAC1B;MAEA,OAAOE,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMiB,eAAe,GAAG,MAAAA,CAAOC,WAAW,GAAG,IAAI,KAAK;IACpD,IAAI;MACFlB,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAII,MAAM;MACV,IAAIc,WAAW,EAAE;QACfd,MAAM,GAAG,MAAMlB,WAAW,CAAC+B,eAAe,CAACC,WAAW,CAAC;MACzD,CAAC,MAAM;QACL;QACAd,MAAM,GAAG,MAAMlB,WAAW,CAACiC,gBAAgB,CAAC,CAAC;QAC7C,IAAIf,MAAM,CAACE,OAAO,EAAE;UAClB;UACAc,cAAc,CAACC,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC;UACnDC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGpB,MAAM,CAACqB,GAAG;UACjC,OAAO;YAAEnB,OAAO,EAAE,IAAI;YAAEoB,UAAU,EAAE;UAAK,CAAC;QAC5C;MACF;MAEA,IAAItB,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACP,IAAI,EAAE;QACjCC,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;MAC1B;MAEA,OAAOE,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM2B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMzC,WAAW,CAACyC,MAAM,CAAC,CAAC;IAC5B,CAAC,SAAS;MACR7B,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B;IACA,OAAO;MAAEI,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED,MAAMsB,aAAa,GAAG,MAAOC,OAAO,IAAK;IACvC,IAAI;MACF,MAAMzB,MAAM,GAAG,MAAMlB,WAAW,CAAC0C,aAAa,CAACC,OAAO,CAAC;MAEvD,IAAIzB,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;MACtB;MAEA,OAAOO,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMiB,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEC,WAAW,EAAEC,uBAAuB,KAAK;IACtF,IAAI;MACF,OAAO,MAAM/C,WAAW,CAAC4C,cAAc,CAACC,eAAe,EAAEC,WAAW,EAAEC,uBAAuB,CAAC;IAChG,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMqB,iBAAiB,GAAG,MAAOhB,WAAW,IAAK;IAC/C,IAAI;MACF,MAAMd,MAAM,GAAG,MAAMlB,WAAW,CAACgD,iBAAiB,CAAChB,WAAW,CAAC;MAE/D,IAAId,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;MACtB;MAEA,OAAOO,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMsB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAM/B,MAAM,GAAG,MAAMlB,WAAW,CAACiD,mBAAmB,CAAC,CAAC;MAEtD,IAAI/B,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;MACtB;MAEA,OAAOO,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMuB,oBAAoB,GAAG,MAAOzB,KAAK,IAAK;IAC5C,IAAI;MACF,OAAO,MAAMzB,WAAW,CAACkD,oBAAoB,CAACzB,KAAK,CAAC;IACtD,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;EAED,MAAMwB,aAAa,GAAG,MAAAA,CAAOC,KAAK,EAAE3B,KAAK,EAAEC,QAAQ,EAAEI,oBAAoB,KAAK;IAC5E,IAAI;MACF,OAAO,MAAM9B,WAAW,CAACmD,aAAa,CAACC,KAAK,EAAE3B,KAAK,EAAEC,QAAQ,EAAEI,oBAAoB,CAAC;IACtF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAM0B,oBAAoB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;IAClD,IAAI;MACFzC,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,MAAM,GAAG,MAAMlB,WAAW,CAACqD,oBAAoB,CAACC,IAAI,EAAEC,KAAK,CAAC;MAElE,IAAIrC,MAAM,CAACE,OAAO,EAAE;QAClBR,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;QACpBK,kBAAkB,CAAC,IAAI,CAAC;MAC1B;MAEA,OAAOE,MAAM;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAEA,KAAK,CAACK;MAAQ,CAAC;IACjD,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM0C,KAAK,GAAG;IACZ7C,IAAI;IACJI,eAAe;IACfF,OAAO;IACPW,KAAK;IACLI,QAAQ;IACRG,eAAe;IACfU,MAAM;IACNC,aAAa;IACbE,cAAc;IACdI,iBAAiB;IACjBC,mBAAmB;IACnBC,oBAAoB;IACpBC,aAAa;IACbE,oBAAoB;IACpBI,WAAW,EAAExC;EACf,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACuD,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA/C,QAAA,EAChCA;EAAQ;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpD,GAAA,CA3NWF,YAAY;AAAAuD,EAAA,GAAZvD,YAAY;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}