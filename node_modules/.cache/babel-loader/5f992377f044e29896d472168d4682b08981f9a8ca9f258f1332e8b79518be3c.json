{"ast":null,"code":"// Enhanced Auth Service for Laravel backend integration\nclass AuthService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n    this.apiURL = `${this.baseURL}/api`;\n    this.token = localStorage.getItem('auth_token');\n    this.user = null;\n\n    // Initialize user from token if exists\n    if (this.token) {\n      this.loadUserFromToken();\n    }\n  }\n\n  // Set authorization headers\n  getAuthHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': this.token ? `Bearer ${this.token}` : '',\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n  }\n\n  // Login with email and password\n  async login(email, password) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/login`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: 'Network error. Please check your connection.'\n      };\n    }\n  }\n\n  // Register new user\n  async register(name, email, password, passwordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/register`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          password_confirmation: passwordConfirmation\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Registration failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: 'Network error. Please check your connection.'\n      };\n    }\n  }\n\n  // Google OAuth login\n  async loginWithGoogle(idToken) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          id_token: idToken\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Google authentication failed'\n        };\n      }\n    } catch (error) {\n      console.error('Google login error:', error);\n      return {\n        success: false,\n        error: 'Network error during Google authentication.'\n      };\n    }\n  }\n\n  // Get Google OAuth URL for redirect\n  async getGoogleAuthUrl() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google/url`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          url: data.url\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to get Google auth URL'\n        };\n      }\n    } catch (error) {\n      console.error('Google auth URL error:', error);\n      return {\n        success: false,\n        error: 'Failed to get Google authentication URL'\n      };\n    }\n  }\n\n  // Handle Google OAuth callback\n  async handleGoogleCallback(code, state) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google/callback`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          code,\n          state\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Google callback failed'\n        };\n      }\n    } catch (error) {\n      console.error('Google callback error:', error);\n      return {\n        success: false,\n        error: 'Failed to process Google authentication'\n      };\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      if (this.token) {\n        await fetch(`${this.apiURL}/auth/logout`, {\n          method: 'POST',\n          headers: this.getAuthHeaders()\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.clearAuthData();\n      return {\n        success: true\n      };\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/refresh`, {\n        method: 'POST',\n        headers: this.getAuthHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.token = data.token;\n        localStorage.setItem('auth_token', this.token);\n        return {\n          success: true,\n          token: this.token\n        };\n      } else {\n        this.clearAuthData();\n        return {\n          success: false,\n          error: 'Token refresh failed'\n        };\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      this.clearAuthData();\n      return {\n        success: false,\n        error: 'Network error during token refresh'\n      };\n    }\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/profile`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.user = data.data.user;\n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        if (response.status === 401) {\n          this.clearAuthData();\n        }\n        return {\n          success: false,\n          error: data.message || 'Failed to get user profile'\n        };\n      }\n    } catch (error) {\n      console.error('Get user error:', error);\n      return {\n        success: false,\n        error: 'Network error while fetching user profile'\n      };\n    }\n  }\n\n  // Update user profile\n  async updateProfile(updates) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/profile`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.user = {\n          ...this.user,\n          ...data.user\n        };\n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Profile update failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return {\n        success: false,\n        error: 'Network error during profile update'\n      };\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword, newPasswordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          current_password: currentPassword,\n          password: newPassword,\n          password_confirmation: newPasswordConfirmation\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Password change failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Password change error:', error);\n      return {\n        success: false,\n        error: 'Network error during password change'\n      };\n    }\n  }\n\n  // Link Google account to existing user\n  async linkGoogleAccount(googleToken) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/link-google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          google_token: googleToken\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.user = data.user;\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to link Google account'\n        };\n      }\n    } catch (error) {\n      console.error('Link Google account error:', error);\n      return {\n        success: false,\n        error: 'Network error while linking Google account'\n      };\n    }\n  }\n\n  // Unlink Google account\n  async unlinkGoogleAccount() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/unlink-google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.user = data.user;\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to unlink Google account'\n        };\n      }\n    } catch (error) {\n      console.error('Unlink Google account error:', error);\n      return {\n        success: false,\n        error: 'Network error while unlinking Google account'\n      };\n    }\n  }\n\n  // Password reset request\n  async requestPasswordReset(email) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password/reset`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      return {\n        success: response.ok && data.success,\n        message: data.message,\n        error: data.success ? null : data.message || 'Password reset request failed'\n      };\n    } catch (error) {\n      console.error('Password reset request error:', error);\n      return {\n        success: false,\n        error: 'Network error during password reset request'\n      };\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, email, password, passwordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password/reset/confirm`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          token,\n          email,\n          password,\n          password_confirmation: passwordConfirmation\n        })\n      });\n      const data = await response.json();\n      return {\n        success: response.ok && data.success,\n        message: data.message,\n        error: data.success ? null : data.message || 'Password reset failed'\n      };\n    } catch (error) {\n      console.error('Password reset error:', error);\n      return {\n        success: false,\n        error: 'Network error during password reset'\n      };\n    }\n  }\n\n  // Handle successful authentication\n  handleAuthSuccess(data) {\n    this.token = data.token;\n    this.user = data.user;\n\n    // Store token in localStorage\n    localStorage.setItem('auth_token', this.token);\n    return {\n      success: true,\n      user: this.user,\n      token: this.token\n    };\n  }\n\n  // Load user from stored token\n  async loadUserFromToken() {\n    if (this.token) {\n      const result = await this.getCurrentUser();\n      return result.success;\n    }\n    return false;\n  }\n\n  // Clear authentication data\n  clearAuthData() {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('auth_token');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.token && !!this.user;\n  }\n\n  // Get current user\n  getUser() {\n    return this.user;\n  }\n\n  // Get auth token\n  getToken() {\n    return this.token;\n  }\n\n  // Auto-refresh token before expiration\n  startTokenRefreshTimer() {\n    // Refresh token every 50 minutes (assuming 60min expiry)\n    setInterval(async () => {\n      if (this.token) {\n        await this.refreshToken();\n      }\n    }, 50 * 60 * 1000);\n  }\n}\n\n// Create singleton instance\nconst authService = new AuthService();\n\n// Start token refresh timer\nauthService.startTokenRefreshTimer();\nexport default authService;","map":{"version":3,"names":["AuthService","constructor","baseURL","process","env","REACT_APP_BACKEND_URL","apiURL","token","localStorage","getItem","user","loadUserFromToken","getAuthHeaders","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","success","handleAuthSuccess","error","message","console","register","name","passwordConfirmation","password_confirmation","errors","loginWithGoogle","idToken","id_token","getGoogleAuthUrl","url","handleGoogleCallback","code","state","logout","clearAuthData","refreshToken","setItem","getCurrentUser","status","updateProfile","updates","changePassword","currentPassword","newPassword","newPasswordConfirmation","current_password","linkGoogleAccount","googleToken","google_token","unlinkGoogleAccount","requestPasswordReset","resetPassword","result","removeItem","isAuthenticated","getUser","getToken","startTokenRefreshTimer","setInterval","authService"],"sources":["/Applications/Projects/bibliofinder-front/src/services/AuthService.js"],"sourcesContent":["// Enhanced Auth Service for Laravel backend integration\nclass AuthService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n    this.apiURL = `${this.baseURL}/api`;\n    this.token = localStorage.getItem('auth_token');\n    this.user = null;\n    \n    // Initialize user from token if exists\n    if (this.token) {\n      this.loadUserFromToken();\n    }\n  }\n\n  // Set authorization headers\n  getAuthHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': this.token ? `Bearer ${this.token}` : '',\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n  }\n\n  // Login with email and password\n  async login(email, password) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/login`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Login failed'\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: 'Network error. Please check your connection.'\n      };\n    }\n  }\n\n  // Register new user\n  async register(name, email, password, passwordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/register`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          password_confirmation: passwordConfirmation\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Registration failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: 'Network error. Please check your connection.'\n      };\n    }\n  }\n\n  // Google OAuth login\n  async loginWithGoogle(idToken) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          id_token: idToken\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data.data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Google authentication failed'\n        };\n      }\n    } catch (error) {\n      console.error('Google login error:', error);\n      return {\n        success: false,\n        error: 'Network error during Google authentication.'\n      };\n    }\n  }\n\n  // Get Google OAuth URL for redirect\n  async getGoogleAuthUrl() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google/url`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          url: data.url\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to get Google auth URL'\n        };\n      }\n    } catch (error) {\n      console.error('Google auth URL error:', error);\n      return {\n        success: false,\n        error: 'Failed to get Google authentication URL'\n      };\n    }\n  }\n\n  // Handle Google OAuth callback\n  async handleGoogleCallback(code, state) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/google/callback`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          code,\n          state\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return this.handleAuthSuccess(data);\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Google callback failed'\n        };\n      }\n    } catch (error) {\n      console.error('Google callback error:', error);\n      return {\n        success: false,\n        error: 'Failed to process Google authentication'\n      };\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      if (this.token) {\n        await fetch(`${this.apiURL}/auth/logout`, {\n          method: 'POST',\n          headers: this.getAuthHeaders()\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.clearAuthData();\n      return { success: true };\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/refresh`, {\n        method: 'POST',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.token = data.token;\n        localStorage.setItem('auth_token', this.token);\n        return {\n          success: true,\n          token: this.token\n        };\n      } else {\n        this.clearAuthData();\n        return {\n          success: false,\n          error: 'Token refresh failed'\n        };\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      this.clearAuthData();\n      return {\n        success: false,\n        error: 'Network error during token refresh'\n      };\n    }\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/profile`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.user = data.data.user;\n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        if (response.status === 401) {\n          this.clearAuthData();\n        }\n        return {\n          success: false,\n          error: data.message || 'Failed to get user profile'\n        };\n      }\n    } catch (error) {\n      console.error('Get user error:', error);\n      return {\n        success: false,\n        error: 'Network error while fetching user profile'\n      };\n    }\n  }\n\n  // Update user profile\n  async updateProfile(updates) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/profile`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.user = { ...this.user, ...data.user };\n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Profile update failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return {\n        success: false,\n        error: 'Network error during profile update'\n      };\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword, newPasswordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          current_password: currentPassword,\n          password: newPassword,\n          password_confirmation: newPasswordConfirmation\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Password change failed',\n          errors: data.errors || {}\n        };\n      }\n    } catch (error) {\n      console.error('Password change error:', error);\n      return {\n        success: false,\n        error: 'Network error during password change'\n      };\n    }\n  }\n\n  // Link Google account to existing user\n  async linkGoogleAccount(googleToken) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/link-google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          google_token: googleToken\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.user = data.user;\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to link Google account'\n        };\n      }\n    } catch (error) {\n      console.error('Link Google account error:', error);\n      return {\n        success: false,\n        error: 'Network error while linking Google account'\n      };\n    }\n  }\n\n  // Unlink Google account\n  async unlinkGoogleAccount() {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/unlink-google`, {\n        method: 'POST',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.user = data.user;\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to unlink Google account'\n        };\n      }\n    } catch (error) {\n      console.error('Unlink Google account error:', error);\n      return {\n        success: false,\n        error: 'Network error while unlinking Google account'\n      };\n    }\n  }\n\n  // Password reset request\n  async requestPasswordReset(email) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password/reset`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({ email })\n      });\n\n      const data = await response.json();\n\n      return {\n        success: response.ok && data.success,\n        message: data.message,\n        error: data.success ? null : (data.message || 'Password reset request failed')\n      };\n    } catch (error) {\n      console.error('Password reset request error:', error);\n      return {\n        success: false,\n        error: 'Network error during password reset request'\n      };\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, email, password, passwordConfirmation) {\n    try {\n      const response = await fetch(`${this.apiURL}/auth/password/reset/confirm`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          token,\n          email,\n          password,\n          password_confirmation: passwordConfirmation\n        })\n      });\n\n      const data = await response.json();\n\n      return {\n        success: response.ok && data.success,\n        message: data.message,\n        error: data.success ? null : (data.message || 'Password reset failed')\n      };\n    } catch (error) {\n      console.error('Password reset error:', error);\n      return {\n        success: false,\n        error: 'Network error during password reset'\n      };\n    }\n  }\n\n  // Handle successful authentication\n  handleAuthSuccess(data) {\n    this.token = data.token;\n    this.user = data.user;\n    \n    // Store token in localStorage\n    localStorage.setItem('auth_token', this.token);\n    \n    return {\n      success: true,\n      user: this.user,\n      token: this.token\n    };\n  }\n\n  // Load user from stored token\n  async loadUserFromToken() {\n    if (this.token) {\n      const result = await this.getCurrentUser();\n      return result.success;\n    }\n    return false;\n  }\n\n  // Clear authentication data\n  clearAuthData() {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('auth_token');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.token && !!this.user;\n  }\n\n  // Get current user\n  getUser() {\n    return this.user;\n  }\n\n  // Get auth token\n  getToken() {\n    return this.token;\n  }\n\n  // Auto-refresh token before expiration\n  startTokenRefreshTimer() {\n    // Refresh token every 50 minutes (assuming 60min expiry)\n    setInterval(async () => {\n      if (this.token) {\n        await this.refreshToken();\n      }\n    }, 50 * 60 * 1000);\n  }\n}\n\n// Create singleton instance\nconst authService = new AuthService();\n\n// Start token refresh timer\nauthService.startTokenRefreshTimer();\n\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}