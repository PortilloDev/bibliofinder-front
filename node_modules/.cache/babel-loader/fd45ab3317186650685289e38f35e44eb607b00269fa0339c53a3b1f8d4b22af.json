{"ast":null,"code":"var _jsxFileName = \"/Applications/Projects/bibliofinder-front/src/context/BooksContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { useCategories } from './CategoriesContext';\nimport laravelBookService from '../services/LaravelBookService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BooksContext = /*#__PURE__*/createContext();\nexport const useBooks = () => {\n  _s();\n  const context = useContext(BooksContext);\n  if (!context) {\n    throw new Error('useBooks must be used within a BooksProvider');\n  }\n  return context;\n};\n_s(useBooks, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const BooksProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const {\n    categories\n  } = useCategories();\n  const [userBooks, setUserBooks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [stats, setStats] = useState({});\n\n  // Load user books when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserBooks();\n      loadReadingStats();\n    } else {\n      setUserBooks([]);\n      setStats({});\n    }\n  }, [isAuthenticated, user]);\n  const loadUserBooks = async () => {\n    try {\n      setLoading(true);\n      const result = await laravelBookService.getUserLibrary();\n      if (result.success) {\n        setUserBooks(result.books);\n      } else {\n        console.error('Failed to load user books:', result.error);\n        // Fallback to localStorage for development\n        const savedBooks = localStorage.getItem(`books_${user === null || user === void 0 ? void 0 : user.id}`);\n        if (savedBooks) {\n          setUserBooks(JSON.parse(savedBooks));\n        }\n      }\n    } catch (error) {\n      console.error('Error loading books:', error);\n      // Fallback to localStorage\n      try {\n        const savedBooks = localStorage.getItem(`books_${user === null || user === void 0 ? void 0 : user.id}`);\n        if (savedBooks) {\n          setUserBooks(JSON.parse(savedBooks));\n        }\n      } catch (e) {\n        console.error('Error loading books from localStorage:', e);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadReadingStats = async () => {\n    try {\n      const result = await laravelBookService.getReadingStats();\n      if (result.success) {\n        setStats(result.stats);\n      } else {\n        // Calculate stats locally as fallback\n        setStats(calculateLocalStats());\n      }\n    } catch (error) {\n      console.error('Error loading stats:', error);\n      setStats(calculateLocalStats());\n    }\n  };\n  const calculateLocalStats = () => {\n    const totalBooks = userBooks.length;\n    const readBooks = userBooks.filter(book => book.categoryId === 'read').length;\n    const readingBooks = userBooks.filter(book => book.categoryId === 'reading').length;\n    const toReadBooks = userBooks.filter(book => book.categoryId === 'to-read').length;\n    const favoriteBooks = userBooks.filter(book => book.favorite || book.categoryId === 'favorites').length;\n    const totalPages = userBooks.reduce((sum, book) => sum + (book.pageCount || 0), 0);\n    const readPages = userBooks.filter(book => book.categoryId === 'read').reduce((sum, book) => sum + (book.pageCount || 0), 0);\n    const averageRating = totalBooks > 0 ? userBooks.reduce((sum, book) => sum + (book.rating || 0), 0) / totalBooks : 0;\n    return {\n      totalBooks,\n      readBooks,\n      readingBooks,\n      toReadBooks,\n      favoriteBooks,\n      totalPages,\n      readPages,\n      averageRating: Math.round(averageRating * 10) / 10\n    };\n  };\n  const addBookToLibrary = async (book, categoryId = 'to-read', notes = '') => {\n    try {\n      const result = await laravelBookService.addBookToLibrary(book, categoryId, notes);\n      if (result.success) {\n        // Refresh library\n        await loadUserBooks();\n        await loadReadingStats();\n        return result;\n      } else {\n        // Fallback to local storage\n        return addBookToLibraryLocal(book, categoryId, notes);\n      }\n    } catch (error) {\n      console.error('Error adding book to library:', error);\n      return addBookToLibraryLocal(book, categoryId, notes);\n    }\n  };\n  const addBookToLibraryLocal = (book, categoryId, notes) => {\n    try {\n      const userBook = {\n        ...book,\n        id: `${book.source}_${book.id}`,\n        categoryId,\n        notes,\n        addedAt: new Date().toISOString(),\n        rating: 0,\n        progress: categoryId === 'read' ? 100 : 0,\n        startedAt: categoryId === 'reading' ? new Date().toISOString() : null,\n        finishedAt: categoryId === 'read' ? new Date().toISOString() : null,\n        personalReview: '',\n        tags: [],\n        favorite: categoryId === 'favorites'\n      };\n      const existingBookIndex = userBooks.findIndex(b => b.id === userBook.id);\n      let updatedBooks;\n      if (existingBookIndex >= 0) {\n        updatedBooks = userBooks.map((b, index) => index === existingBookIndex ? {\n          ...b,\n          ...userBook,\n          updatedAt: new Date().toISOString()\n        } : b);\n      } else {\n        updatedBooks = [...userBooks, userBook];\n      }\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n      return {\n        success: true,\n        book: userBook\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateBook = async (bookId, updates) => {\n    try {\n      const result = await laravelBookService.updateBookInLibrary(bookId, updates);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, updates);\n      }\n    } catch (error) {\n      console.error('Error updating book:', error);\n      return updateBookLocal(bookId, updates);\n    }\n  };\n  const updateBookLocal = (bookId, updates) => {\n    try {\n      const updatedBooks = userBooks.map(book => book.id === bookId ? {\n        ...book,\n        ...updates,\n        updatedAt: new Date().toISOString()\n      } : book);\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const moveBookToCategory = async (bookId, newCategoryId) => {\n    try {\n      const result = await laravelBookService.moveBookToCategory(bookId, newCategoryId);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return moveBookToCategoryLocal(bookId, newCategoryId);\n      }\n    } catch (error) {\n      console.error('Error moving book to category:', error);\n      return moveBookToCategoryLocal(bookId, newCategoryId);\n    }\n  };\n  const moveBookToCategoryLocal = (bookId, newCategoryId) => {\n    var _userBooks$find;\n    const updates = {\n      categoryId: newCategoryId,\n      updatedAt: new Date().toISOString()\n    };\n\n    // Handle special category logic\n    if (newCategoryId === 'reading' && !((_userBooks$find = userBooks.find(b => b.id === bookId)) !== null && _userBooks$find !== void 0 && _userBooks$find.startedAt)) {\n      updates.startedAt = new Date().toISOString();\n      updates.progress = 0;\n    } else if (newCategoryId === 'read') {\n      updates.finishedAt = new Date().toISOString();\n      updates.progress = 100;\n    } else if (newCategoryId === 'favorites') {\n      updates.favorite = true;\n    }\n    return updateBookLocal(bookId, updates);\n  };\n  const removeBookFromLibrary = async bookId => {\n    try {\n      const result = await laravelBookService.removeBookFromLibrary(bookId);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return removeBookFromLibraryLocal(bookId);\n      }\n    } catch (error) {\n      console.error('Error removing book from library:', error);\n      return removeBookFromLibraryLocal(bookId);\n    }\n  };\n  const removeBookFromLibraryLocal = bookId => {\n    try {\n      const updatedBooks = userBooks.filter(book => book.id !== bookId);\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateBookNotes = async (bookId, notes) => {\n    try {\n      const result = await laravelBookService.updateBookNotes(bookId, notes);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, {\n          notes\n        });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, {\n        notes\n      });\n    }\n  };\n  const updateBookRating = async (bookId, rating) => {\n    try {\n      const result = await laravelBookService.updateBookRating(bookId, rating);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, {\n          rating\n        });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, {\n        rating\n      });\n    }\n  };\n  const updateBookProgress = async (bookId, progress) => {\n    try {\n      const result = await laravelBookService.updateReadingProgress(bookId, progress);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, {\n          progress\n        });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, {\n        progress\n      });\n    }\n  };\n  const updateBookReview = async (bookId, personalReview, rating = null) => {\n    try {\n      const result = await laravelBookService.addBookReview(bookId, personalReview, rating);\n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        const updates = {\n          personalReview\n        };\n        if (rating !== null) updates.rating = rating;\n        return updateBookLocal(bookId, updates);\n      }\n    } catch (error) {\n      const updates = {\n        personalReview\n      };\n      if (rating !== null) updates.rating = rating;\n      return updateBookLocal(bookId, updates);\n    }\n  };\n  const importBooksFromData = async booksData => {\n    try {\n      setLoading(true);\n\n      // Try to use Laravel backend first\n      if (isAuthenticated) {\n        // Convert data to a file-like format for the API\n        const csvContent = convertBooksDataToCSV(booksData);\n        const file = new Blob([csvContent], {\n          type: 'text/csv'\n        });\n        file.name = 'imported_books.csv';\n        const result = await laravelBookService.importBooks(file);\n        if (result.success) {\n          await loadUserBooks();\n          await loadReadingStats();\n          return result;\n        }\n      }\n\n      // Fallback to local import\n      return await importBooksFromDataLocal(booksData);\n    } catch (error) {\n      console.error('Error importing books:', error);\n      return await importBooksFromDataLocal(booksData);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const convertBooksDataToCSV = booksData => {\n    const headers = ['title', 'authors', 'description', 'category', 'publisher', 'publishedDate', 'pageCount', 'isbn', 'language', 'notes', 'review', 'rating'];\n    const csvRows = [headers.join(',')];\n    booksData.forEach(book => {\n      const row = headers.map(header => {\n        const value = book[header] || '';\n        return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n      });\n      csvRows.push(row.join(','));\n    });\n    return csvRows.join('\\n');\n  };\n  const importBooksFromDataLocal = async booksData => {\n    try {\n      const importedBooks = [];\n      const errors = [];\n      for (const bookData of booksData) {\n        try {\n          const category = categories.find(c => {\n            var _bookData$category;\n            return c.name.toLowerCase() === ((_bookData$category = bookData.category) === null || _bookData$category === void 0 ? void 0 : _bookData$category.toLowerCase());\n          }) || categories.find(c => c.id === 'to-read');\n          const userBook = {\n            id: `imported_${Date.now()}_${Math.random()}`,\n            title: bookData.title || 'Sin título',\n            authors: bookData.authors ? [bookData.authors] : [],\n            description: bookData.description || '',\n            publishedDate: bookData.publishedDate || '',\n            publisher: bookData.publisher || '',\n            pageCount: parseInt(bookData.pageCount) || 0,\n            categories: bookData.categories ? [bookData.categories] : [],\n            averageRating: parseFloat(bookData.rating) || 0,\n            ratingsCount: 0,\n            imageLinks: {},\n            language: bookData.language || 'es',\n            isbn: bookData.isbn || '',\n            source: 'imported',\n            categoryId: category.id,\n            notes: bookData.notes || '',\n            addedAt: new Date().toISOString(),\n            rating: parseFloat(bookData.personalRating) || 0,\n            progress: parseInt(bookData.progress) || 0,\n            personalReview: bookData.review || '',\n            tags: bookData.tags ? bookData.tags.split(',').map(t => t.trim()) : [],\n            favorite: false\n          };\n          importedBooks.push(userBook);\n        } catch (error) {\n          errors.push({\n            book: bookData,\n            error: error.message\n          });\n        }\n      }\n      const updatedBooks = [...userBooks, ...importedBooks];\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n      return {\n        success: true,\n        imported: importedBooks.length,\n        errors: errors.length,\n        books: importedBooks\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const getBooksByCategory = categoryId => {\n    return userBooks.filter(book => book.categoryId === categoryId);\n  };\n  const getReadingStats = () => {\n    return stats.totalBooks ? stats : calculateLocalStats();\n  };\n  const searchUserBooks = async (query, filters = {}) => {\n    try {\n      const result = await laravelBookService.searchUserLibrary(query, filters);\n      if (result.success) {\n        return result.books;\n      } else {\n        return searchUserBooksLocal(query, filters);\n      }\n    } catch (error) {\n      return searchUserBooksLocal(query, filters);\n    }\n  };\n  const searchUserBooksLocal = (query, filters = {}) => {\n    if (!query && !Object.keys(filters).length) return userBooks;\n    return userBooks.filter(book => {\n      var _filters$tags;\n      const matchesQuery = !query || book.title.toLowerCase().includes(query.toLowerCase()) || book.authors.some(author => author.toLowerCase().includes(query.toLowerCase())) || book.description.toLowerCase().includes(query.toLowerCase());\n      const matchesCategory = !filters.categoryId || book.categoryId === filters.categoryId;\n      const matchesRating = !filters.minRating || book.rating >= filters.minRating;\n      const matchesTags = !((_filters$tags = filters.tags) !== null && _filters$tags !== void 0 && _filters$tags.length) || filters.tags.some(tag => book.tags.includes(tag));\n      return matchesQuery && matchesCategory && matchesRating && matchesTags;\n    });\n  };\n  const value = {\n    userBooks,\n    loading,\n    stats: getReadingStats(),\n    addBookToLibrary,\n    updateBook,\n    moveBookToCategory,\n    removeBookFromLibrary,\n    updateBookNotes,\n    updateBookRating,\n    updateBookProgress,\n    updateBookReview,\n    importBooksFromData,\n    getBooksByCategory,\n    getReadingStats,\n    searchUserBooks,\n    refreshLibrary: loadUserBooks\n  };\n  return /*#__PURE__*/_jsxDEV(BooksContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 5\n  }, this);\n};\n_s2(BooksProvider, \"hqOVvJkvhmKnXgr89XdV4l3wwfc=\", false, function () {\n  return [useAuth, useCategories];\n});\n_c = BooksProvider;\nvar _c;\n$RefreshReg$(_c, \"BooksProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","useCategories","laravelBookService","jsxDEV","_jsxDEV","BooksContext","useBooks","_s","context","Error","BooksProvider","children","_s2","user","isAuthenticated","categories","userBooks","setUserBooks","loading","setLoading","stats","setStats","loadUserBooks","loadReadingStats","result","getUserLibrary","success","books","console","error","savedBooks","localStorage","getItem","id","JSON","parse","e","getReadingStats","calculateLocalStats","totalBooks","length","readBooks","filter","book","categoryId","readingBooks","toReadBooks","favoriteBooks","favorite","totalPages","reduce","sum","pageCount","readPages","averageRating","rating","Math","round","addBookToLibrary","notes","addBookToLibraryLocal","userBook","source","addedAt","Date","toISOString","progress","startedAt","finishedAt","personalReview","tags","existingBookIndex","findIndex","b","updatedBooks","map","index","updatedAt","setItem","stringify","message","updateBook","bookId","updates","updateBookInLibrary","updateBookLocal","moveBookToCategory","newCategoryId","moveBookToCategoryLocal","_userBooks$find","find","removeBookFromLibrary","removeBookFromLibraryLocal","updateBookNotes","updateBookRating","updateBookProgress","updateReadingProgress","updateBookReview","addBookReview","importBooksFromData","booksData","csvContent","convertBooksDataToCSV","file","Blob","type","name","importBooks","importBooksFromDataLocal","headers","csvRows","join","forEach","row","header","value","String","replace","push","importedBooks","errors","bookData","category","c","_bookData$category","toLowerCase","now","random","title","authors","description","publishedDate","publisher","parseInt","parseFloat","ratingsCount","imageLinks","language","isbn","personalRating","review","split","t","trim","imported","getBooksByCategory","searchUserBooks","query","filters","searchUserLibrary","searchUserBooksLocal","Object","keys","_filters$tags","matchesQuery","includes","some","author","matchesCategory","matchesRating","minRating","matchesTags","tag","refreshLibrary","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/Projects/bibliofinder-front/src/context/BooksContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { useCategories } from './CategoriesContext';\nimport laravelBookService from '../services/LaravelBookService';\n\nconst BooksContext = createContext();\n\nexport const useBooks = () => {\n  const context = useContext(BooksContext);\n  if (!context) {\n    throw new Error('useBooks must be used within a BooksProvider');\n  }\n  return context;\n};\n\nexport const BooksProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const { categories } = useCategories();\n  const [userBooks, setUserBooks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [stats, setStats] = useState({});\n\n  // Load user books when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserBooks();\n      loadReadingStats();\n    } else {\n      setUserBooks([]);\n      setStats({});\n    }\n  }, [isAuthenticated, user]);\n\n  const loadUserBooks = async () => {\n    try {\n      setLoading(true);\n      const result = await laravelBookService.getUserLibrary();\n      \n      if (result.success) {\n        setUserBooks(result.books);\n      } else {\n        console.error('Failed to load user books:', result.error);\n        // Fallback to localStorage for development\n        const savedBooks = localStorage.getItem(`books_${user?.id}`);\n        if (savedBooks) {\n          setUserBooks(JSON.parse(savedBooks));\n        }\n      }\n    } catch (error) {\n      console.error('Error loading books:', error);\n      // Fallback to localStorage\n      try {\n        const savedBooks = localStorage.getItem(`books_${user?.id}`);\n        if (savedBooks) {\n          setUserBooks(JSON.parse(savedBooks));\n        }\n      } catch (e) {\n        console.error('Error loading books from localStorage:', e);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadReadingStats = async () => {\n    try {\n      const result = await laravelBookService.getReadingStats();\n      \n      if (result.success) {\n        setStats(result.stats);\n      } else {\n        // Calculate stats locally as fallback\n        setStats(calculateLocalStats());\n      }\n    } catch (error) {\n      console.error('Error loading stats:', error);\n      setStats(calculateLocalStats());\n    }\n  };\n\n  const calculateLocalStats = () => {\n    const totalBooks = userBooks.length;\n    const readBooks = userBooks.filter(book => book.categoryId === 'read').length;\n    const readingBooks = userBooks.filter(book => book.categoryId === 'reading').length;\n    const toReadBooks = userBooks.filter(book => book.categoryId === 'to-read').length;\n    const favoriteBooks = userBooks.filter(book => book.favorite || book.categoryId === 'favorites').length;\n    \n    const totalPages = userBooks.reduce((sum, book) => sum + (book.pageCount || 0), 0);\n    const readPages = userBooks\n      .filter(book => book.categoryId === 'read')\n      .reduce((sum, book) => sum + (book.pageCount || 0), 0);\n\n    const averageRating = totalBooks > 0 \n      ? userBooks.reduce((sum, book) => sum + (book.rating || 0), 0) / totalBooks \n      : 0;\n\n    return {\n      totalBooks,\n      readBooks,\n      readingBooks,\n      toReadBooks,\n      favoriteBooks,\n      totalPages,\n      readPages,\n      averageRating: Math.round(averageRating * 10) / 10\n    };\n  };\n\n  const addBookToLibrary = async (book, categoryId = 'to-read', notes = '') => {\n    try {\n      const result = await laravelBookService.addBookToLibrary(book, categoryId, notes);\n      \n      if (result.success) {\n        // Refresh library\n        await loadUserBooks();\n        await loadReadingStats();\n        return result;\n      } else {\n        // Fallback to local storage\n        return addBookToLibraryLocal(book, categoryId, notes);\n      }\n    } catch (error) {\n      console.error('Error adding book to library:', error);\n      return addBookToLibraryLocal(book, categoryId, notes);\n    }\n  };\n\n  const addBookToLibraryLocal = (book, categoryId, notes) => {\n    try {\n      const userBook = {\n        ...book,\n        id: `${book.source}_${book.id}`,\n        categoryId,\n        notes,\n        addedAt: new Date().toISOString(),\n        rating: 0,\n        progress: categoryId === 'read' ? 100 : 0,\n        startedAt: categoryId === 'reading' ? new Date().toISOString() : null,\n        finishedAt: categoryId === 'read' ? new Date().toISOString() : null,\n        personalReview: '',\n        tags: [],\n        favorite: categoryId === 'favorites'\n      };\n\n      const existingBookIndex = userBooks.findIndex(b => b.id === userBook.id);\n      \n      let updatedBooks;\n      if (existingBookIndex >= 0) {\n        updatedBooks = userBooks.map((b, index) => \n          index === existingBookIndex ? { ...b, ...userBook, updatedAt: new Date().toISOString() } : b\n        );\n      } else {\n        updatedBooks = [...userBooks, userBook];\n      }\n\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n\n      return { success: true, book: userBook };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const updateBook = async (bookId, updates) => {\n    try {\n      const result = await laravelBookService.updateBookInLibrary(bookId, updates);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, updates);\n      }\n    } catch (error) {\n      console.error('Error updating book:', error);\n      return updateBookLocal(bookId, updates);\n    }\n  };\n\n  const updateBookLocal = (bookId, updates) => {\n    try {\n      const updatedBooks = userBooks.map(book =>\n        book.id === bookId\n          ? { ...book, ...updates, updatedAt: new Date().toISOString() }\n          : book\n      );\n\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const moveBookToCategory = async (bookId, newCategoryId) => {\n    try {\n      const result = await laravelBookService.moveBookToCategory(bookId, newCategoryId);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return moveBookToCategoryLocal(bookId, newCategoryId);\n      }\n    } catch (error) {\n      console.error('Error moving book to category:', error);\n      return moveBookToCategoryLocal(bookId, newCategoryId);\n    }\n  };\n\n  const moveBookToCategoryLocal = (bookId, newCategoryId) => {\n    const updates = {\n      categoryId: newCategoryId,\n      updatedAt: new Date().toISOString()\n    };\n\n    // Handle special category logic\n    if (newCategoryId === 'reading' && !userBooks.find(b => b.id === bookId)?.startedAt) {\n      updates.startedAt = new Date().toISOString();\n      updates.progress = 0;\n    } else if (newCategoryId === 'read') {\n      updates.finishedAt = new Date().toISOString();\n      updates.progress = 100;\n    } else if (newCategoryId === 'favorites') {\n      updates.favorite = true;\n    }\n\n    return updateBookLocal(bookId, updates);\n  };\n\n  const removeBookFromLibrary = async (bookId) => {\n    try {\n      const result = await laravelBookService.removeBookFromLibrary(bookId);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return removeBookFromLibraryLocal(bookId);\n      }\n    } catch (error) {\n      console.error('Error removing book from library:', error);\n      return removeBookFromLibraryLocal(bookId);\n    }\n  };\n\n  const removeBookFromLibraryLocal = (bookId) => {\n    try {\n      const updatedBooks = userBooks.filter(book => book.id !== bookId);\n      setUserBooks(updatedBooks);\n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const updateBookNotes = async (bookId, notes) => {\n    try {\n      const result = await laravelBookService.updateBookNotes(bookId, notes);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, { notes });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, { notes });\n    }\n  };\n\n  const updateBookRating = async (bookId, rating) => {\n    try {\n      const result = await laravelBookService.updateBookRating(bookId, rating);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, { rating });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, { rating });\n    }\n  };\n\n  const updateBookProgress = async (bookId, progress) => {\n    try {\n      const result = await laravelBookService.updateReadingProgress(bookId, progress);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        return updateBookLocal(bookId, { progress });\n      }\n    } catch (error) {\n      return updateBookLocal(bookId, { progress });\n    }\n  };\n\n  const updateBookReview = async (bookId, personalReview, rating = null) => {\n    try {\n      const result = await laravelBookService.addBookReview(bookId, personalReview, rating);\n      \n      if (result.success) {\n        await loadUserBooks();\n        return result;\n      } else {\n        const updates = { personalReview };\n        if (rating !== null) updates.rating = rating;\n        return updateBookLocal(bookId, updates);\n      }\n    } catch (error) {\n      const updates = { personalReview };\n      if (rating !== null) updates.rating = rating;\n      return updateBookLocal(bookId, updates);\n    }\n  };\n\n  const importBooksFromData = async (booksData) => {\n    try {\n      setLoading(true);\n      \n      // Try to use Laravel backend first\n      if (isAuthenticated) {\n        // Convert data to a file-like format for the API\n        const csvContent = convertBooksDataToCSV(booksData);\n        const file = new Blob([csvContent], { type: 'text/csv' });\n        file.name = 'imported_books.csv';\n        \n        const result = await laravelBookService.importBooks(file);\n        \n        if (result.success) {\n          await loadUserBooks();\n          await loadReadingStats();\n          return result;\n        }\n      }\n      \n      // Fallback to local import\n      return await importBooksFromDataLocal(booksData);\n    } catch (error) {\n      console.error('Error importing books:', error);\n      return await importBooksFromDataLocal(booksData);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const convertBooksDataToCSV = (booksData) => {\n    const headers = ['title', 'authors', 'description', 'category', 'publisher', 'publishedDate', 'pageCount', 'isbn', 'language', 'notes', 'review', 'rating'];\n    const csvRows = [headers.join(',')];\n    \n    booksData.forEach(book => {\n      const row = headers.map(header => {\n        const value = book[header] || '';\n        return `\"${String(value).replace(/\"/g, '\"\"')}\"`;\n      });\n      csvRows.push(row.join(','));\n    });\n    \n    return csvRows.join('\\n');\n  };\n\n  const importBooksFromDataLocal = async (booksData) => {\n    try {\n      const importedBooks = [];\n      const errors = [];\n\n      for (const bookData of booksData) {\n        try {\n          const category = categories.find(c => \n            c.name.toLowerCase() === bookData.category?.toLowerCase()\n          ) || categories.find(c => c.id === 'to-read');\n\n          const userBook = {\n            id: `imported_${Date.now()}_${Math.random()}`,\n            title: bookData.title || 'Sin título',\n            authors: bookData.authors ? [bookData.authors] : [],\n            description: bookData.description || '',\n            publishedDate: bookData.publishedDate || '',\n            publisher: bookData.publisher || '',\n            pageCount: parseInt(bookData.pageCount) || 0,\n            categories: bookData.categories ? [bookData.categories] : [],\n            averageRating: parseFloat(bookData.rating) || 0,\n            ratingsCount: 0,\n            imageLinks: {},\n            language: bookData.language || 'es',\n            isbn: bookData.isbn || '',\n            source: 'imported',\n            categoryId: category.id,\n            notes: bookData.notes || '',\n            addedAt: new Date().toISOString(),\n            rating: parseFloat(bookData.personalRating) || 0,\n            progress: parseInt(bookData.progress) || 0,\n            personalReview: bookData.review || '',\n            tags: bookData.tags ? bookData.tags.split(',').map(t => t.trim()) : [],\n            favorite: false\n          };\n\n          importedBooks.push(userBook);\n        } catch (error) {\n          errors.push({ book: bookData, error: error.message });\n        }\n      }\n\n      const updatedBooks = [...userBooks, ...importedBooks];\n      setUserBooks(updatedBooks);\n      \n      if (user) {\n        localStorage.setItem(`books_${user.id}`, JSON.stringify(updatedBooks));\n      }\n\n      return { \n        success: true, \n        imported: importedBooks.length,\n        errors: errors.length,\n        books: importedBooks\n      };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const getBooksByCategory = (categoryId) => {\n    return userBooks.filter(book => book.categoryId === categoryId);\n  };\n\n  const getReadingStats = () => {\n    return stats.totalBooks ? stats : calculateLocalStats();\n  };\n\n  const searchUserBooks = async (query, filters = {}) => {\n    try {\n      const result = await laravelBookService.searchUserLibrary(query, filters);\n      \n      if (result.success) {\n        return result.books;\n      } else {\n        return searchUserBooksLocal(query, filters);\n      }\n    } catch (error) {\n      return searchUserBooksLocal(query, filters);\n    }\n  };\n\n  const searchUserBooksLocal = (query, filters = {}) => {\n    if (!query && !Object.keys(filters).length) return userBooks;\n\n    return userBooks.filter(book => {\n      const matchesQuery = !query || \n        book.title.toLowerCase().includes(query.toLowerCase()) ||\n        book.authors.some(author => author.toLowerCase().includes(query.toLowerCase())) ||\n        book.description.toLowerCase().includes(query.toLowerCase());\n\n      const matchesCategory = !filters.categoryId || book.categoryId === filters.categoryId;\n      const matchesRating = !filters.minRating || book.rating >= filters.minRating;\n      const matchesTags = !filters.tags?.length || \n        filters.tags.some(tag => book.tags.includes(tag));\n\n      return matchesQuery && matchesCategory && matchesRating && matchesTags;\n    });\n  };\n\n  const value = {\n    userBooks,\n    loading,\n    stats: getReadingStats(),\n    addBookToLibrary,\n    updateBook,\n    moveBookToCategory,\n    removeBookFromLibrary,\n    updateBookNotes,\n    updateBookRating,\n    updateBookProgress,\n    updateBookReview,\n    importBooksFromData,\n    getBooksByCategory,\n    getReadingStats,\n    searchUserBooks,\n    refreshLibrary: loadUserBooks\n  };\n\n  return (\n    <BooksContext.Provider value={value}>\n      {children}\n    </BooksContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}