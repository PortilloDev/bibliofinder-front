{"ast":null,"code":"// Service for book recommendations and related books\nclass RecommendationService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimeout = 10 * 60 * 1000; // 10 minutes\n  }\n\n  // Generate recommendations based on user's reading history\n  async getPersonalizedRecommendations(userBooks, limit = 10) {\n    try {\n      if (!userBooks || userBooks.length === 0) {\n        return this.getPopularRecommendations(limit);\n      }\n\n      // Extract user preferences from reading history\n      const preferences = this.analyzeUserPreferences(userBooks);\n\n      // Mock API call to Laravel backend\n      // TODO: Replace with real API call when Laravel backend is connected\n      const recommendations = await this.mockPersonalizedRecommendations(preferences, limit);\n      return {\n        success: true,\n        recommendations,\n        reason: 'personalized'\n      };\n    } catch (error) {\n      console.error('Error getting personalized recommendations:', error);\n      return {\n        success: false,\n        error: error.message,\n        recommendations: []\n      };\n    }\n  }\n\n  // Get related books based on a specific book\n  async getRelatedBooks(book, userBooks = [], limit = 6) {\n    try {\n      const cacheKey = `related_${book.id}_${limit}`;\n\n      // Check cache\n      if (this.cache.has(cacheKey)) {\n        const cached = this.cache.get(cacheKey);\n        if (Date.now() - cached.timestamp < this.cacheTimeout) {\n          return cached.data;\n        }\n        this.cache.delete(cacheKey);\n      }\n\n      // Find related books based on various criteria\n      const relatedBooks = await this.findRelatedBooks(book, userBooks, limit);\n      const result = {\n        success: true,\n        books: relatedBooks,\n        criteria: this.getRelationCriteria(book)\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n      return result;\n    } catch (error) {\n      console.error('Error getting related books:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: []\n      };\n    }\n  }\n\n  // Analyze user preferences from reading history\n  analyzeUserPreferences(userBooks) {\n    const preferences = {\n      genres: {},\n      authors: {},\n      languages: {},\n      publicationPeriods: {},\n      averageRating: 0,\n      averagePageCount: 0\n    };\n    let totalRating = 0;\n    let totalPages = 0;\n    let ratedBooks = 0;\n    userBooks.forEach(book => {\n      // Analyze genres/categories\n      if (book.categories) {\n        book.categories.forEach(category => {\n          preferences.genres[category] = (preferences.genres[category] || 0) + 1;\n        });\n      }\n\n      // Analyze authors\n      if (book.authors) {\n        book.authors.forEach(author => {\n          preferences.authors[author] = (preferences.authors[author] || 0) + 1;\n        });\n      }\n\n      // Analyze languages\n      if (book.language) {\n        preferences.languages[book.language] = (preferences.languages[book.language] || 0) + 1;\n      }\n\n      // Analyze publication periods\n      if (book.publishedDate) {\n        const year = new Date(book.publishedDate).getFullYear();\n        const decade = Math.floor(year / 10) * 10;\n        if (!isNaN(decade)) {\n          preferences.publicationPeriods[decade] = (preferences.publicationPeriods[decade] || 0) + 1;\n        }\n      }\n\n      // Analyze ratings\n      if (book.rating && book.rating > 0) {\n        totalRating += book.rating;\n        ratedBooks++;\n      }\n\n      // Analyze page counts\n      if (book.pageCount && book.pageCount > 0) {\n        totalPages += book.pageCount;\n      }\n    });\n\n    // Calculate averages\n    preferences.averageRating = ratedBooks > 0 ? totalRating / ratedBooks : 0;\n    preferences.averagePageCount = userBooks.length > 0 ? totalPages / userBooks.length : 0;\n\n    // Sort preferences by frequency\n    preferences.topGenres = Object.entries(preferences.genres).sort(([, a], [, b]) => b - a).slice(0, 5).map(([genre]) => genre);\n    preferences.topAuthors = Object.entries(preferences.authors).sort(([, a], [, b]) => b - a).slice(0, 3).map(([author]) => author);\n    return preferences;\n  }\n\n  // Mock personalized recommendations (replace with real API)\n  async mockPersonalizedRecommendations(preferences, limit) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Mock recommendations based on preferences\n    const mockBooks = [{\n      id: 'rec_1',\n      title: 'Recommended Book Based on Your Reading History',\n      authors: preferences.topAuthors[0] ? [preferences.topAuthors[0]] : ['Similar Author'],\n      categories: preferences.topGenres.slice(0, 2),\n      averageRating: Math.max(4.0, preferences.averageRating - 0.5),\n      description: 'A book tailored to your reading preferences and history.',\n      publishedDate: '2023-01-01',\n      pageCount: Math.round(preferences.averagePageCount * 1.1),\n      imageLinks: {\n        thumbnail: ''\n      },\n      source: 'recommendation',\n      recommendationReason: 'Based on your love for ' + preferences.topGenres[0]\n    }\n    // Add more mock recommendations...\n    ];\n    return mockBooks.slice(0, limit);\n  }\n\n  // Find related books using various algorithms\n  async findRelatedBooks(book, userBooks, limit) {\n    const relatedBooks = [];\n\n    // 1. Books by same authors\n    if (book.authors && book.authors.length > 0) {\n      const sameAuthorBooks = await this.findBooksByAuthors(book.authors, book.id);\n      relatedBooks.push(...sameAuthorBooks.slice(0, 2));\n    }\n\n    // 2. Books in same categories\n    if (book.categories && book.categories.length > 0) {\n      const sameCategoryBooks = await this.findBooksByCategories(book.categories, book.id);\n      relatedBooks.push(...sameCategoryBooks.slice(0, 2));\n    }\n\n    // 3. Books from similar time period\n    if (book.publishedDate) {\n      const similarPeriodBooks = await this.findBooksBySimilarPeriod(book.publishedDate, book.id);\n      relatedBooks.push(...similarPeriodBooks.slice(0, 2));\n    }\n\n    // Remove duplicates and books already in user library\n    const uniqueBooks = this.removeDuplicatesAndUserBooks(relatedBooks, userBooks);\n    return uniqueBooks.slice(0, limit);\n  }\n\n  // Mock method to find books by authors (replace with API call)\n  async findBooksByAuthors(authors, excludeId) {\n    // Mock implementation - replace with real API call to Laravel\n    return [{\n      id: `author_${Date.now()}`,\n      title: `Another book by ${authors[0]}`,\n      authors: authors,\n      categories: ['Fiction'],\n      averageRating: 4.2,\n      description: `Another great work by ${authors[0]}`,\n      publishedDate: '2022-06-15',\n      pageCount: 320,\n      imageLinks: {\n        thumbnail: ''\n      },\n      source: 'related-author'\n    }];\n  }\n\n  // Mock method to find books by categories\n  async findBooksByCategories(categories, excludeId) {\n    // Mock implementation - replace with real API call to Laravel\n    return [{\n      id: `category_${Date.now()}`,\n      title: `Similar book in ${categories[0]}`,\n      authors: ['Related Author'],\n      categories: categories,\n      averageRating: 4.0,\n      description: `A book similar to your interests in ${categories[0]}`,\n      publishedDate: '2023-03-20',\n      pageCount: 280,\n      imageLinks: {\n        thumbnail: ''\n      },\n      source: 'related-category'\n    }];\n  }\n\n  // Mock method to find books from similar time period\n  async findBooksBySimilarPeriod(publishedDate, excludeId) {\n    const year = new Date(publishedDate).getFullYear();\n    return [{\n      id: `period_${Date.now()}`,\n      title: `Contemporary book from ${year}`,\n      authors: ['Period Author'],\n      categories: ['Historical'],\n      averageRating: 4.1,\n      description: `A book from the same era (${year})`,\n      publishedDate: publishedDate,\n      pageCount: 350,\n      imageLinks: {\n        thumbnail: ''\n      },\n      source: 'related-period'\n    }];\n  }\n\n  // Get popular recommendations for new users\n  async getPopularRecommendations(limit = 10) {\n    try {\n      // Mock popular books - replace with real API call\n      const popularBooks = [{\n        id: 'pop_1',\n        title: 'The Seven Husbands of Evelyn Hugo',\n        authors: ['Taylor Jenkins Reid'],\n        categories: ['Fiction', 'Romance'],\n        averageRating: 4.3,\n        description: 'A captivating novel about a reclusive Hollywood icon.',\n        publishedDate: '2017-06-13',\n        pageCount: 400,\n        imageLinks: {\n          thumbnail: ''\n        },\n        source: 'popular'\n      }, {\n        id: 'pop_2',\n        title: 'Atomic Habits',\n        authors: ['James Clear'],\n        categories: ['Self-Help', 'Psychology'],\n        averageRating: 4.4,\n        description: 'Transform your life with tiny changes in behavior.',\n        publishedDate: '2018-10-16',\n        pageCount: 320,\n        imageLinks: {\n          thumbnail: ''\n        },\n        source: 'popular'\n      }];\n      return {\n        success: true,\n        recommendations: popularBooks.slice(0, limit),\n        reason: 'popular'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        recommendations: []\n      };\n    }\n  }\n\n  // Remove duplicates and books already in user library\n  removeDuplicatesAndUserBooks(books, userBooks) {\n    const userBookIds = new Set(userBooks.map(book => book.id));\n    const seen = new Set();\n    return books.filter(book => {\n      if (seen.has(book.id) || userBookIds.has(book.id)) {\n        return false;\n      }\n      seen.add(book.id);\n      return true;\n    });\n  }\n\n  // Get criteria used for finding related books\n  getRelationCriteria(book) {\n    const criteria = [];\n    if (book.authors && book.authors.length > 0) {\n      criteria.push(`Same authors: ${book.authors.join(', ')}`);\n    }\n    if (book.categories && book.categories.length > 0) {\n      criteria.push(`Similar categories: ${book.categories.join(', ')}`);\n    }\n    if (book.publishedDate) {\n      const year = new Date(book.publishedDate).getFullYear();\n      criteria.push(`Similar time period: ${year}`);\n    }\n    return criteria;\n  }\n\n  // Clear recommendation cache\n  clearCache() {\n    this.cache.clear();\n  }\n\n  // Get cache statistics\n  getCacheStats() {\n    return {\n      totalEntries: this.cache.size,\n      cacheTimeout: this.cacheTimeout / 1000 / 60 // in minutes\n    };\n  }\n}\n\n// Create singleton instance\nconst recommendationService = new RecommendationService();\nexport default recommendationService;","map":{"version":3,"names":["RecommendationService","constructor","cache","Map","cacheTimeout","getPersonalizedRecommendations","userBooks","limit","length","getPopularRecommendations","preferences","analyzeUserPreferences","recommendations","mockPersonalizedRecommendations","success","reason","error","console","message","getRelatedBooks","book","cacheKey","id","has","cached","get","Date","now","timestamp","data","delete","relatedBooks","findRelatedBooks","result","books","criteria","getRelationCriteria","set","genres","authors","languages","publicationPeriods","averageRating","averagePageCount","totalRating","totalPages","ratedBooks","forEach","categories","category","author","language","publishedDate","year","getFullYear","decade","Math","floor","isNaN","rating","pageCount","topGenres","Object","entries","sort","a","b","slice","map","genre","topAuthors","Promise","resolve","setTimeout","mockBooks","title","max","description","round","imageLinks","thumbnail","source","recommendationReason","sameAuthorBooks","findBooksByAuthors","push","sameCategoryBooks","findBooksByCategories","similarPeriodBooks","findBooksBySimilarPeriod","uniqueBooks","removeDuplicatesAndUserBooks","excludeId","popularBooks","userBookIds","Set","seen","filter","add","join","clearCache","clear","getCacheStats","totalEntries","size","recommendationService"],"sources":["/Applications/Projects/bibliofinder-front/src/services/RecommendationService.js"],"sourcesContent":["// Service for book recommendations and related books\nclass RecommendationService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimeout = 10 * 60 * 1000; // 10 minutes\n  }\n\n  // Generate recommendations based on user's reading history\n  async getPersonalizedRecommendations(userBooks, limit = 10) {\n    try {\n      if (!userBooks || userBooks.length === 0) {\n        return this.getPopularRecommendations(limit);\n      }\n\n      // Extract user preferences from reading history\n      const preferences = this.analyzeUserPreferences(userBooks);\n      \n      // Mock API call to Laravel backend\n      // TODO: Replace with real API call when Laravel backend is connected\n      const recommendations = await this.mockPersonalizedRecommendations(preferences, limit);\n      \n      return {\n        success: true,\n        recommendations,\n        reason: 'personalized'\n      };\n    } catch (error) {\n      console.error('Error getting personalized recommendations:', error);\n      return {\n        success: false,\n        error: error.message,\n        recommendations: []\n      };\n    }\n  }\n\n  // Get related books based on a specific book\n  async getRelatedBooks(book, userBooks = [], limit = 6) {\n    try {\n      const cacheKey = `related_${book.id}_${limit}`;\n      \n      // Check cache\n      if (this.cache.has(cacheKey)) {\n        const cached = this.cache.get(cacheKey);\n        if (Date.now() - cached.timestamp < this.cacheTimeout) {\n          return cached.data;\n        }\n        this.cache.delete(cacheKey);\n      }\n\n      // Find related books based on various criteria\n      const relatedBooks = await this.findRelatedBooks(book, userBooks, limit);\n      \n      const result = {\n        success: true,\n        books: relatedBooks,\n        criteria: this.getRelationCriteria(book)\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now()\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error getting related books:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: []\n      };\n    }\n  }\n\n  // Analyze user preferences from reading history\n  analyzeUserPreferences(userBooks) {\n    const preferences = {\n      genres: {},\n      authors: {},\n      languages: {},\n      publicationPeriods: {},\n      averageRating: 0,\n      averagePageCount: 0\n    };\n\n    let totalRating = 0;\n    let totalPages = 0;\n    let ratedBooks = 0;\n\n    userBooks.forEach(book => {\n      // Analyze genres/categories\n      if (book.categories) {\n        book.categories.forEach(category => {\n          preferences.genres[category] = (preferences.genres[category] || 0) + 1;\n        });\n      }\n\n      // Analyze authors\n      if (book.authors) {\n        book.authors.forEach(author => {\n          preferences.authors[author] = (preferences.authors[author] || 0) + 1;\n        });\n      }\n\n      // Analyze languages\n      if (book.language) {\n        preferences.languages[book.language] = (preferences.languages[book.language] || 0) + 1;\n      }\n\n      // Analyze publication periods\n      if (book.publishedDate) {\n        const year = new Date(book.publishedDate).getFullYear();\n        const decade = Math.floor(year / 10) * 10;\n        if (!isNaN(decade)) {\n          preferences.publicationPeriods[decade] = (preferences.publicationPeriods[decade] || 0) + 1;\n        }\n      }\n\n      // Analyze ratings\n      if (book.rating && book.rating > 0) {\n        totalRating += book.rating;\n        ratedBooks++;\n      }\n\n      // Analyze page counts\n      if (book.pageCount && book.pageCount > 0) {\n        totalPages += book.pageCount;\n      }\n    });\n\n    // Calculate averages\n    preferences.averageRating = ratedBooks > 0 ? totalRating / ratedBooks : 0;\n    preferences.averagePageCount = userBooks.length > 0 ? totalPages / userBooks.length : 0;\n\n    // Sort preferences by frequency\n    preferences.topGenres = Object.entries(preferences.genres)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([genre]) => genre);\n\n    preferences.topAuthors = Object.entries(preferences.authors)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 3)\n      .map(([author]) => author);\n\n    return preferences;\n  }\n\n  // Mock personalized recommendations (replace with real API)\n  async mockPersonalizedRecommendations(preferences, limit) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Mock recommendations based on preferences\n    const mockBooks = [\n      {\n        id: 'rec_1',\n        title: 'Recommended Book Based on Your Reading History',\n        authors: preferences.topAuthors[0] ? [preferences.topAuthors[0]] : ['Similar Author'],\n        categories: preferences.topGenres.slice(0, 2),\n        averageRating: Math.max(4.0, preferences.averageRating - 0.5),\n        description: 'A book tailored to your reading preferences and history.',\n        publishedDate: '2023-01-01',\n        pageCount: Math.round(preferences.averagePageCount * 1.1),\n        imageLinks: { thumbnail: '' },\n        source: 'recommendation',\n        recommendationReason: 'Based on your love for ' + preferences.topGenres[0]\n      }\n      // Add more mock recommendations...\n    ];\n\n    return mockBooks.slice(0, limit);\n  }\n\n  // Find related books using various algorithms\n  async findRelatedBooks(book, userBooks, limit) {\n    const relatedBooks = [];\n\n    // 1. Books by same authors\n    if (book.authors && book.authors.length > 0) {\n      const sameAuthorBooks = await this.findBooksByAuthors(book.authors, book.id);\n      relatedBooks.push(...sameAuthorBooks.slice(0, 2));\n    }\n\n    // 2. Books in same categories\n    if (book.categories && book.categories.length > 0) {\n      const sameCategoryBooks = await this.findBooksByCategories(book.categories, book.id);\n      relatedBooks.push(...sameCategoryBooks.slice(0, 2));\n    }\n\n    // 3. Books from similar time period\n    if (book.publishedDate) {\n      const similarPeriodBooks = await this.findBooksBySimilarPeriod(book.publishedDate, book.id);\n      relatedBooks.push(...similarPeriodBooks.slice(0, 2));\n    }\n\n    // Remove duplicates and books already in user library\n    const uniqueBooks = this.removeDuplicatesAndUserBooks(relatedBooks, userBooks);\n\n    return uniqueBooks.slice(0, limit);\n  }\n\n  // Mock method to find books by authors (replace with API call)\n  async findBooksByAuthors(authors, excludeId) {\n    // Mock implementation - replace with real API call to Laravel\n    return [\n      {\n        id: `author_${Date.now()}`,\n        title: `Another book by ${authors[0]}`,\n        authors: authors,\n        categories: ['Fiction'],\n        averageRating: 4.2,\n        description: `Another great work by ${authors[0]}`,\n        publishedDate: '2022-06-15',\n        pageCount: 320,\n        imageLinks: { thumbnail: '' },\n        source: 'related-author'\n      }\n    ];\n  }\n\n  // Mock method to find books by categories\n  async findBooksByCategories(categories, excludeId) {\n    // Mock implementation - replace with real API call to Laravel\n    return [\n      {\n        id: `category_${Date.now()}`,\n        title: `Similar book in ${categories[0]}`,\n        authors: ['Related Author'],\n        categories: categories,\n        averageRating: 4.0,\n        description: `A book similar to your interests in ${categories[0]}`,\n        publishedDate: '2023-03-20',\n        pageCount: 280,\n        imageLinks: { thumbnail: '' },\n        source: 'related-category'\n      }\n    ];\n  }\n\n  // Mock method to find books from similar time period\n  async findBooksBySimilarPeriod(publishedDate, excludeId) {\n    const year = new Date(publishedDate).getFullYear();\n    \n    return [\n      {\n        id: `period_${Date.now()}`,\n        title: `Contemporary book from ${year}`,\n        authors: ['Period Author'],\n        categories: ['Historical'],\n        averageRating: 4.1,\n        description: `A book from the same era (${year})`,\n        publishedDate: publishedDate,\n        pageCount: 350,\n        imageLinks: { thumbnail: '' },\n        source: 'related-period'\n      }\n    ];\n  }\n\n  // Get popular recommendations for new users\n  async getPopularRecommendations(limit = 10) {\n    try {\n      // Mock popular books - replace with real API call\n      const popularBooks = [\n        {\n          id: 'pop_1',\n          title: 'The Seven Husbands of Evelyn Hugo',\n          authors: ['Taylor Jenkins Reid'],\n          categories: ['Fiction', 'Romance'],\n          averageRating: 4.3,\n          description: 'A captivating novel about a reclusive Hollywood icon.',\n          publishedDate: '2017-06-13',\n          pageCount: 400,\n          imageLinks: { thumbnail: '' },\n          source: 'popular'\n        },\n        {\n          id: 'pop_2',\n          title: 'Atomic Habits',\n          authors: ['James Clear'],\n          categories: ['Self-Help', 'Psychology'],\n          averageRating: 4.4,\n          description: 'Transform your life with tiny changes in behavior.',\n          publishedDate: '2018-10-16',\n          pageCount: 320,\n          imageLinks: { thumbnail: '' },\n          source: 'popular'\n        }\n      ];\n\n      return {\n        success: true,\n        recommendations: popularBooks.slice(0, limit),\n        reason: 'popular'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        recommendations: []\n      };\n    }\n  }\n\n  // Remove duplicates and books already in user library\n  removeDuplicatesAndUserBooks(books, userBooks) {\n    const userBookIds = new Set(userBooks.map(book => book.id));\n    const seen = new Set();\n    \n    return books.filter(book => {\n      if (seen.has(book.id) || userBookIds.has(book.id)) {\n        return false;\n      }\n      seen.add(book.id);\n      return true;\n    });\n  }\n\n  // Get criteria used for finding related books\n  getRelationCriteria(book) {\n    const criteria = [];\n    \n    if (book.authors && book.authors.length > 0) {\n      criteria.push(`Same authors: ${book.authors.join(', ')}`);\n    }\n    \n    if (book.categories && book.categories.length > 0) {\n      criteria.push(`Similar categories: ${book.categories.join(', ')}`);\n    }\n    \n    if (book.publishedDate) {\n      const year = new Date(book.publishedDate).getFullYear();\n      criteria.push(`Similar time period: ${year}`);\n    }\n\n    return criteria;\n  }\n\n  // Clear recommendation cache\n  clearCache() {\n    this.cache.clear();\n  }\n\n  // Get cache statistics\n  getCacheStats() {\n    return {\n      totalEntries: this.cache.size,\n      cacheTimeout: this.cacheTimeout / 1000 / 60 // in minutes\n    };\n  }\n}\n\n// Create singleton instance\nconst recommendationService = new RecommendationService();\n\nexport default recommendationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}