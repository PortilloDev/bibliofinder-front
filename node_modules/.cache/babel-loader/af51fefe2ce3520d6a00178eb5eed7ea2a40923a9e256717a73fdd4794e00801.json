{"ast":null,"code":"import BookAPIAdapter from './BookAPIAdapter';\nclass GoogleBooksAdapter extends BookAPIAdapter {\n  constructor(apiKey = null) {\n    super('GoogleBooks');\n    this.baseURL = 'https://www.googleapis.com/books/v1';\n    this.apiKey = apiKey; // Optional: for higher rate limits\n  }\n  async search(query, options = {}) {\n    try {\n      const {\n        maxResults = 20,\n        startIndex = 0,\n        orderBy = 'relevance',\n        // relevance, newest\n        langRestrict = 'es',\n        printType = 'books'\n      } = options;\n      let url = `${this.baseURL}/volumes?q=${encodeURIComponent(query)}`;\n      url += `&maxResults=${maxResults}`;\n      url += `&startIndex=${startIndex}`;\n      url += `&orderBy=${orderBy}`;\n      url += `&langRestrict=${langRestrict}`;\n      url += `&printType=${printType}`;\n      if (this.apiKey) {\n        url += `&key=${this.apiKey}`;\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Google Books API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        success: true,\n        books: (data.items || []).map(item => this.normalizeBook(item)),\n        totalItems: data.totalItems || 0,\n        hasMore: startIndex + maxResults < (data.totalItems || 0)\n      };\n    } catch (error) {\n      console.error('Google Books API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: [],\n        totalItems: 0,\n        hasMore: false\n      };\n    }\n  }\n  async getBookDetails(bookId) {\n    try {\n      let url = `${this.baseURL}/volumes/${bookId}`;\n      if (this.apiKey) {\n        url += `?key=${this.apiKey}`;\n      }\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Google Books API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return {\n        success: true,\n        book: this.normalizeBook(data)\n      };\n    } catch (error) {\n      console.error('Google Books API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        book: null\n      };\n    }\n  }\n  normalizeBook(rawBook) {\n    var _identifiers$find, _identifiers$find2;\n    const volumeInfo = rawBook.volumeInfo || {};\n    const saleInfo = rawBook.saleInfo || {};\n\n    // Extract ISBNs\n    const identifiers = volumeInfo.industryIdentifiers || [];\n    const isbn13 = ((_identifiers$find = identifiers.find(id => id.type === 'ISBN_13')) === null || _identifiers$find === void 0 ? void 0 : _identifiers$find.identifier) || '';\n    const isbn10 = ((_identifiers$find2 = identifiers.find(id => id.type === 'ISBN_10')) === null || _identifiers$find2 === void 0 ? void 0 : _identifiers$find2.identifier) || '';\n    const isbn = isbn13 || isbn10;\n    return this.createStandardBook({\n      id: rawBook.id,\n      title: volumeInfo.title,\n      authors: volumeInfo.authors || [],\n      description: volumeInfo.description,\n      publishedDate: volumeInfo.publishedDate,\n      publisher: volumeInfo.publisher,\n      pageCount: volumeInfo.pageCount,\n      categories: volumeInfo.categories || [],\n      averageRating: volumeInfo.averageRating,\n      ratingsCount: volumeInfo.ratingsCount,\n      imageLinks: volumeInfo.imageLinks || {},\n      language: volumeInfo.language,\n      isbn: isbn,\n      source: 'google-books'\n    });\n  }\n\n  // Search by specific fields\n  async searchByAuthor(author, options = {}) {\n    return this.search(`inauthor:\"${author}\"`, options);\n  }\n  async searchByTitle(title, options = {}) {\n    return this.search(`intitle:\"${title}\"`, options);\n  }\n  async searchByISBN(isbn, options = {}) {\n    return this.search(`isbn:${isbn}`, options);\n  }\n  async searchBySubject(subject, options = {}) {\n    return this.search(`subject:\"${subject}\"`, options);\n  }\n}\nexport default GoogleBooksAdapter;","map":{"version":3,"names":["BookAPIAdapter","GoogleBooksAdapter","constructor","apiKey","baseURL","search","query","options","maxResults","startIndex","orderBy","langRestrict","printType","url","encodeURIComponent","response","fetch","ok","Error","status","data","json","success","books","items","map","item","normalizeBook","totalItems","hasMore","error","console","message","getBookDetails","bookId","book","rawBook","_identifiers$find","_identifiers$find2","volumeInfo","saleInfo","identifiers","industryIdentifiers","isbn13","find","id","type","identifier","isbn10","isbn","createStandardBook","title","authors","description","publishedDate","publisher","pageCount","categories","averageRating","ratingsCount","imageLinks","language","source","searchByAuthor","author","searchByTitle","searchByISBN","searchBySubject","subject"],"sources":["/Applications/Projects/bibliofinder-front/src/services/api/GoogleBooksAdapter.js"],"sourcesContent":["import BookAPIAdapter from './BookAPIAdapter';\n\nclass GoogleBooksAdapter extends BookAPIAdapter {\n  constructor(apiKey = null) {\n    super('GoogleBooks');\n    this.baseURL = 'https://www.googleapis.com/books/v1';\n    this.apiKey = apiKey; // Optional: for higher rate limits\n  }\n\n  async search(query, options = {}) {\n    try {\n      const {\n        maxResults = 20,\n        startIndex = 0,\n        orderBy = 'relevance', // relevance, newest\n        langRestrict = 'es',\n        printType = 'books'\n      } = options;\n\n      let url = `${this.baseURL}/volumes?q=${encodeURIComponent(query)}`;\n      url += `&maxResults=${maxResults}`;\n      url += `&startIndex=${startIndex}`;\n      url += `&orderBy=${orderBy}`;\n      url += `&langRestrict=${langRestrict}`;\n      url += `&printType=${printType}`;\n      \n      if (this.apiKey) {\n        url += `&key=${this.apiKey}`;\n      }\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Google Books API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        books: (data.items || []).map(item => this.normalizeBook(item)),\n        totalItems: data.totalItems || 0,\n        hasMore: (startIndex + maxResults) < (data.totalItems || 0)\n      };\n    } catch (error) {\n      console.error('Google Books API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        books: [],\n        totalItems: 0,\n        hasMore: false\n      };\n    }\n  }\n\n  async getBookDetails(bookId) {\n    try {\n      let url = `${this.baseURL}/volumes/${bookId}`;\n      if (this.apiKey) {\n        url += `?key=${this.apiKey}`;\n      }\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Google Books API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        success: true,\n        book: this.normalizeBook(data)\n      };\n    } catch (error) {\n      console.error('Google Books API Error:', error);\n      return {\n        success: false,\n        error: error.message,\n        book: null\n      };\n    }\n  }\n\n  normalizeBook(rawBook) {\n    const volumeInfo = rawBook.volumeInfo || {};\n    const saleInfo = rawBook.saleInfo || {};\n    \n    // Extract ISBNs\n    const identifiers = volumeInfo.industryIdentifiers || [];\n    const isbn13 = identifiers.find(id => id.type === 'ISBN_13')?.identifier || '';\n    const isbn10 = identifiers.find(id => id.type === 'ISBN_10')?.identifier || '';\n    const isbn = isbn13 || isbn10;\n\n    return this.createStandardBook({\n      id: rawBook.id,\n      title: volumeInfo.title,\n      authors: volumeInfo.authors || [],\n      description: volumeInfo.description,\n      publishedDate: volumeInfo.publishedDate,\n      publisher: volumeInfo.publisher,\n      pageCount: volumeInfo.pageCount,\n      categories: volumeInfo.categories || [],\n      averageRating: volumeInfo.averageRating,\n      ratingsCount: volumeInfo.ratingsCount,\n      imageLinks: volumeInfo.imageLinks || {},\n      language: volumeInfo.language,\n      isbn: isbn,\n      source: 'google-books'\n    });\n  }\n\n  // Search by specific fields\n  async searchByAuthor(author, options = {}) {\n    return this.search(`inauthor:\"${author}\"`, options);\n  }\n\n  async searchByTitle(title, options = {}) {\n    return this.search(`intitle:\"${title}\"`, options);\n  }\n\n  async searchByISBN(isbn, options = {}) {\n    return this.search(`isbn:${isbn}`, options);\n  }\n\n  async searchBySubject(subject, options = {}) {\n    return this.search(`subject:\"${subject}\"`, options);\n  }\n}\n\nexport default GoogleBooksAdapter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}