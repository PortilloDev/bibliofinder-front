{"ast":null,"code":"// Laravel Backend Book Service\nimport authService from './AuthService';\nclass LaravelBookService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n    this.apiURL = `${this.baseURL}/api`;\n  }\n\n  // Get authorization headers\n  getAuthHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': authService.getToken() ? `Bearer ${authService.getToken()}` : '',\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    const data = await response.json();\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      const refreshResult = await authService.refreshToken();\n      if (!refreshResult.success) {\n        authService.clearAuthData();\n        window.location.href = '/login';\n      }\n      throw new Error('Authentication required');\n    }\n    return data;\n  }\n\n  // Get user's personal library\n  async getUserLibrary(page = 1, limit = 20, filters = {}) {\n    try {\n      const queryParams = new URLSearchParams({\n        page,\n        limit,\n        ...filters\n      });\n\n      // Updated to match Laravel routes: /api/books (user's library)\n      const response = await fetch(`${this.apiURL}/books?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: data.success || response.ok,\n        books: data.data || [],\n        pagination: data.pagination || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get user library error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Add book to user's library\n  async addBookToLibrary(book, categoryId = 'to-read', notes = '') {\n    try {\n      // Updated to match Laravel routes: /api/books (POST to add book)\n      const response = await fetch(`${this.apiURL}/books`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          external_book_id: book.id,\n          source: book.source || 'google-books',\n          book_data: {\n            title: book.title,\n            authors: book.authors,\n            description: book.description,\n            published_date: book.publishedDate,\n            publisher: book.publisher,\n            page_count: book.pageCount,\n            categories: book.categories,\n            average_rating: book.averageRating,\n            ratings_count: book.ratingsCount,\n            image_links: book.imageLinks,\n            language: book.language,\n            isbn: book.isbn,\n            external_id: book.id,\n            source: book.source || 'google-books'\n          },\n          category_id: categoryId,\n          notes\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: data.success || response.ok,\n        book: data.data,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Add book to library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book in library\n  async updateBookInLibrary(bookId, updates) {\n    try {\n      // Updated to match Laravel routes: /api/books/{id} (PUT)\n      const response = await fetch(`${this.apiURL}/books/${bookId}`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: data.success || response.ok,\n        book: data.data,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book in library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Remove book from library\n  async removeBookFromLibrary(bookId) {\n    try {\n      // Updated to match Laravel routes: /api/books/{id} (DELETE)\n      const response = await fetch(`${this.apiURL}/books/${bookId}`, {\n        method: 'DELETE',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: data.success || response.ok,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Remove book from library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Move book to different category\n  async moveBookToCategory(bookId, categoryId) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/move`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          category_id: categoryId\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Move book to category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book notes\n  async updateBookNotes(bookId, notes) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/notes`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          notes\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book notes error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book rating\n  async updateBookRating(bookId, rating) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/rating`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          rating\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book rating error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update reading progress\n  async updateReadingProgress(bookId, progress) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/progress`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          progress\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update reading progress error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get user categories\n  async getUserCategories() {\n    try {\n      const response = await fetch(`${this.apiURL}/categories`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        categories: data.categories || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get user categories error:', error);\n      return {\n        success: false,\n        categories: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Create custom category\n  async createCategory(categoryData) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(categoryData)\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        category: data.category,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Create category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update category\n  async updateCategory(categoryId, updates) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories/${categoryId}`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        category: data.category,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Delete category\n  async deleteCategory(categoryId) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories/${categoryId}`, {\n        method: 'DELETE',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Delete category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Import books from Excel/CSV\n  async importBooks(file, options = {}) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      Object.keys(options).forEach(key => {\n        formData.append(key, options[key]);\n      });\n      const response = await fetch(`${this.apiURL}/books/import`, {\n        method: 'POST',\n        headers: {\n          'Authorization': authService.getToken() ? `Bearer ${authService.getToken()}` : '',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: formData\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        imported: data.imported || 0,\n        errors: data.errors || [],\n        categories_created: data.categories_created || 0,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Import books error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get reading statistics\n  async getReadingStats() {\n    try {\n      const response = await fetch(`${this.apiURL}/books/stats`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        stats: data.stats || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get reading stats error:', error);\n      return {\n        success: false,\n        stats: {},\n        error: error.message\n      };\n    }\n  }\n\n  // Search in user library\n  async searchUserLibrary(query, filters = {}) {\n    try {\n      const queryParams = new URLSearchParams({\n        q: query,\n        ...filters\n      });\n\n      // Updated to match Laravel routes: /api/books/search\n      const response = await fetch(`${this.apiURL}/books/search?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: data.success || response.ok,\n        books: data.data || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Search user library error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Get personalized recommendations\n  async getPersonalizedRecommendations(limit = 10) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/recommendations?limit=${limit}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        recommendations: data.recommendations || [],\n        reason: data.reason || 'personalized',\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get recommendations error:', error);\n      return {\n        success: false,\n        recommendations: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Get related books\n  async getRelatedBooks(bookId, limit = 6) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/${bookId}/related?limit=${limit}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        books: data.books || [],\n        criteria: data.criteria || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get related books error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Add book review\n  async addBookReview(bookId, review, rating = null) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/review`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          review,\n          rating\n        })\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Add book review error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get public reviews for a book\n  async getBookReviews(bookId, page = 1, limit = 10) {\n    try {\n      const queryParams = new URLSearchParams({\n        page,\n        limit\n      });\n      const response = await fetch(`${this.apiURL}/books/${bookId}/reviews?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n      const data = await this.handleResponse(response);\n      return {\n        success: response.ok,\n        reviews: data.reviews || [],\n        pagination: data.pagination || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get book reviews error:', error);\n      return {\n        success: false,\n        reviews: [],\n        error: error.message\n      };\n    }\n  }\n}\n\n// Create singleton instance\nconst laravelBookService = new LaravelBookService();\nexport default laravelBookService;","map":{"version":3,"names":["authService","LaravelBookService","constructor","baseURL","process","env","REACT_APP_BACKEND_URL","apiURL","getAuthHeaders","getToken","handleResponse","response","data","json","status","refreshResult","refreshToken","success","clearAuthData","window","location","href","Error","getUserLibrary","page","limit","filters","queryParams","URLSearchParams","fetch","method","headers","ok","books","pagination","error","message","console","addBookToLibrary","book","categoryId","notes","body","JSON","stringify","external_book_id","id","source","book_data","title","authors","description","published_date","publishedDate","publisher","page_count","pageCount","categories","average_rating","averageRating","ratings_count","ratingsCount","image_links","imageLinks","language","isbn","external_id","category_id","updateBookInLibrary","bookId","updates","removeBookFromLibrary","moveBookToCategory","updateBookNotes","updateBookRating","rating","updateReadingProgress","progress","getUserCategories","createCategory","categoryData","category","updateCategory","deleteCategory","importBooks","file","options","formData","FormData","append","Object","keys","forEach","key","imported","errors","categories_created","getReadingStats","stats","searchUserLibrary","query","q","getPersonalizedRecommendations","recommendations","reason","getRelatedBooks","criteria","addBookReview","review","getBookReviews","reviews","laravelBookService"],"sources":["/Applications/Projects/bibliofinder-front/src/services/LaravelBookService.js"],"sourcesContent":["// Laravel Backend Book Service\nimport authService from './AuthService';\n\nclass LaravelBookService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8000';\n    this.apiURL = `${this.baseURL}/api`;\n  }\n\n  // Get authorization headers\n  getAuthHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': authService.getToken() ? `Bearer ${authService.getToken()}` : '',\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    const data = await response.json();\n    \n    if (response.status === 401) {\n      // Token expired, try to refresh\n      const refreshResult = await authService.refreshToken();\n      if (!refreshResult.success) {\n        authService.clearAuthData();\n        window.location.href = '/login';\n      }\n      throw new Error('Authentication required');\n    }\n\n    return data;\n  }\n\n  // Get user's personal library\n  async getUserLibrary(page = 1, limit = 20, filters = {}) {\n    try {\n      const queryParams = new URLSearchParams({\n        page,\n        limit,\n        ...filters\n      });\n\n      // Updated to match Laravel routes: /api/books (user's library)\n      const response = await fetch(`${this.apiURL}/books?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: data.success || response.ok,\n        books: data.data || [],\n        pagination: data.pagination || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get user library error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Add book to user's library\n  async addBookToLibrary(book, categoryId = 'to-read', notes = '') {\n    try {\n      // Updated to match Laravel routes: /api/books (POST to add book)\n      const response = await fetch(`${this.apiURL}/books`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          external_book_id: book.id,\n          source: book.source || 'google-books',\n          book_data: {\n            title: book.title,\n            authors: book.authors,\n            description: book.description,\n            published_date: book.publishedDate,\n            publisher: book.publisher,\n            page_count: book.pageCount,\n            categories: book.categories,\n            average_rating: book.averageRating,\n            ratings_count: book.ratingsCount,\n            image_links: book.imageLinks,\n            language: book.language,\n            isbn: book.isbn,\n            external_id: book.id,\n            source: book.source || 'google-books'\n          },\n          category_id: categoryId,\n          notes\n        })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: data.success || response.ok,\n        book: data.data,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Add book to library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book in library\n  async updateBookInLibrary(bookId, updates) {\n    try {\n      // Updated to match Laravel routes: /api/books/{id} (PUT)\n      const response = await fetch(`${this.apiURL}/books/${bookId}`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: data.success || response.ok,\n        book: data.data,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book in library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Remove book from library\n  async removeBookFromLibrary(bookId) {\n    try {\n      // Updated to match Laravel routes: /api/books/{id} (DELETE)\n      const response = await fetch(`${this.apiURL}/books/${bookId}`, {\n        method: 'DELETE',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: data.success || response.ok,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Remove book from library error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Move book to different category\n  async moveBookToCategory(bookId, categoryId) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/move`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          category_id: categoryId\n        })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Move book to category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book notes\n  async updateBookNotes(bookId, notes) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/notes`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({ notes })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book notes error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update book rating\n  async updateBookRating(bookId, rating) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/rating`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({ rating })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update book rating error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update reading progress\n  async updateReadingProgress(bookId, progress) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/progress`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({ progress })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update reading progress error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get user categories\n  async getUserCategories() {\n    try {\n      const response = await fetch(`${this.apiURL}/categories`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        categories: data.categories || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get user categories error:', error);\n      return {\n        success: false,\n        categories: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Create custom category\n  async createCategory(categoryData) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(categoryData)\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        category: data.category,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Create category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update category\n  async updateCategory(categoryId, updates) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories/${categoryId}`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        category: data.category,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Update category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Delete category\n  async deleteCategory(categoryId) {\n    try {\n      const response = await fetch(`${this.apiURL}/categories/${categoryId}`, {\n        method: 'DELETE',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Delete category error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Import books from Excel/CSV\n  async importBooks(file, options = {}) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      Object.keys(options).forEach(key => {\n        formData.append(key, options[key]);\n      });\n\n      const response = await fetch(`${this.apiURL}/books/import`, {\n        method: 'POST',\n        headers: {\n          'Authorization': authService.getToken() ? `Bearer ${authService.getToken()}` : '',\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: formData\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        imported: data.imported || 0,\n        errors: data.errors || [],\n        categories_created: data.categories_created || 0,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Import books error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get reading statistics\n  async getReadingStats() {\n    try {\n      const response = await fetch(`${this.apiURL}/books/stats`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        stats: data.stats || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get reading stats error:', error);\n      return {\n        success: false,\n        stats: {},\n        error: error.message\n      };\n    }\n  }\n\n  // Search in user library\n  async searchUserLibrary(query, filters = {}) {\n    try {\n      const queryParams = new URLSearchParams({\n        q: query,\n        ...filters\n      });\n\n      // Updated to match Laravel routes: /api/books/search\n      const response = await fetch(`${this.apiURL}/books/search?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: data.success || response.ok,\n        books: data.data || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Search user library error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Get personalized recommendations\n  async getPersonalizedRecommendations(limit = 10) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/recommendations?limit=${limit}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        recommendations: data.recommendations || [],\n        reason: data.reason || 'personalized',\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get recommendations error:', error);\n      return {\n        success: false,\n        recommendations: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Get related books\n  async getRelatedBooks(bookId, limit = 6) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/${bookId}/related?limit=${limit}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        books: data.books || [],\n        criteria: data.criteria || [],\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get related books error:', error);\n      return {\n        success: false,\n        books: [],\n        error: error.message\n      };\n    }\n  }\n\n  // Add book review\n  async addBookReview(bookId, review, rating = null) {\n    try {\n      const response = await fetch(`${this.apiURL}/books/library/${bookId}/review`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify({\n          review,\n          rating\n        })\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        book: data.book,\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Add book review error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get public reviews for a book\n  async getBookReviews(bookId, page = 1, limit = 10) {\n    try {\n      const queryParams = new URLSearchParams({\n        page,\n        limit\n      });\n\n      const response = await fetch(`${this.apiURL}/books/${bookId}/reviews?${queryParams}`, {\n        method: 'GET',\n        headers: this.getAuthHeaders()\n      });\n\n      const data = await this.handleResponse(response);\n\n      return {\n        success: response.ok,\n        reviews: data.reviews || [],\n        pagination: data.pagination || {},\n        error: data.success ? null : data.message\n      };\n    } catch (error) {\n      console.error('Get book reviews error:', error);\n      return {\n        success: false,\n        reviews: [],\n        error: error.message\n      };\n    }\n  }\n}\n\n// Create singleton instance\nconst laravelBookService = new LaravelBookService();\n\nexport default laravelBookService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}